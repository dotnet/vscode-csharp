{
  "name": "csharp",
  "publisher": "ms-dotnettools",
  "version": "42.42.42-placeholder",
  "description": "Base language support for C#",
  "displayName": "C#",
  "author": "Microsoft Corporation",
  "license": "SEE LICENSE IN RuntimeLicenses/license.txt",
  "qna": "https://github.com/dotnet/vscode-csharp/issues",
  "icon": "images/csharpIcon.png",
  "preview": false,
  "bugs": {
    "url": "https://github.com/dotnet/vscode-csharp"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dotnet/vscode-csharp"
  },
  "categories": [
    "Debuggers",
    "Programming Languages",
    "Linters",
    "Snippets"
  ],
  "keywords": [
    "multi-root ready",
    ".NET",
    "ASP.NET",
    ".NET Core",
    "dotnet",
    "coreclr"
  ],
  "capabilities": {
    "virtualWorkspaces": false,
    "untrustedWorkspaces": {
      "supported": false
    }
  },
  "extensionKind": [
    "workspace"
  ],
  "defaults": {
    "roslyn": "5.0.0-1.25266.2",
    "omniSharp": "1.39.12",
    "razor": "10.0.0-preview.25262.1",
    "razorOmnisharp": "7.0.0-preview.23363.1",
    "xamlTools": "17.14.36106.43"
  },
  "main": "./dist/extension",
  "l10n": "./l10n",
  "brokeredServices": [
    {
      "moniker": {
        "name": "Microsoft.CodeAnalysis.LanguageClient.SolutionSnapshotProvider",
        "version": "0.1"
      }
    },
    {
      "moniker": {
        "name": "Microsoft.VisualStudio.CSharpExtension.BuildResultService",
        "version": "0.1"
      }
    }
  ],
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "tsc -p ./ && npx eslint ./ && npm run l10nDevGenerateLocalizationBundle && npm run compile:razorTextMate",
    "compileDev": "tsc -p ./ && npm run l10nDevGenerateLocalizationBundle && npm run compile:razorTextMate",
    "package": "npm run compile && node esbuild.js --production && gulp signJs",
    "packageDev": "npm run compileDev && node esbuild.js",
    "l10nDevGenerateLocalizationBundle": "npx @vscode/l10n-dev export --outDir ./l10n ./src",
    "compile:razorTextMate": "npx js-yaml src/razor/syntaxes/aspnetcorerazor.tmLanguage.yml > src/razor/syntaxes/aspnetcorerazor.tmLanguage.json",
    "test:unit": "npm run compileDev && gulp test:unit",
    "test:integration:csharp": "npm run package && gulp test:integration:csharp",
    "test:integration:razor": "npm run package && gulp test:integration:razor",
    "test:integration:devkit": "npm run package && gulp test:integration:devkit",
    "profiling": "npm run package && gulp profiling",
    "test:artifacts": "npm run compileDev && gulp test:artifacts",
    "omnisharptest": "npm run package && gulp omnisharptest",
    "omnisharptest:unit": "npm run compileDev && gulp omnisharptest:unit",
    "omnisharptest:integration": "npm run package && gulp omnisharptest:integration",
    "omnisharptest:integration:singleCsproj": "npm run package && gulp omnisharptest:integration:singleCsproj",
    "omnisharptest:integration:slnWithCsproj": "npm run package && gulp omnisharptest:integration:slnWithCsproj",
    "omnisharptest:integration:slnFilterWithCsproj": "npm run package && gulp omnisharptest:integration:slnFilterWithCsproj",
    "updatePackageDependencies": "gulp updatePackageDependencies",
    "l10nDevGenerateXlf": "npx @vscode/l10n-dev generate-xlf ./package.nls.json ./l10n/bundle.l10n.json --outFile ./loc/vscode-csharp.xlf",
    "l10nDevImportXlf": "npx @vscode/l10n-dev import-xlf ./loc/vscode-csharp.*.xlf --outDir ./l10n && move l10n\\package.nls.*.json ."
  },
  "extensionDependencies": [
    "ms-dotnettools.vscode-dotnet-runtime"
  ],
  "dependencies": {
    "@github/copilot-language-server": "1.290.0",
    "@microsoft/servicehub-framework": "4.2.99-beta",
    "@octokit/rest": "^20.0.1",
    "@types/cross-spawn": "6.0.2",
    "@vscode/debugprotocol": "1.56.0",
    "@vscode/extension-telemetry": "^0.9.0",
    "@vscode/js-debug-browsers": "^1.1.0",
    "async-file": "2.0.2",
    "cross-spawn": "6.0.6",
    "execa": "4.0.0",
    "fs-extra": "9.1.0",
    "http-proxy-agent": "7.0.0",
    "https-proxy-agent": "7.0.2",
    "jsonc-parser": "3.0.0",
    "microsoft.aspnetcore.razor.vscode": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/0af42abab690d5de903a4a814d6aedc1/microsoft.aspnetcore.razor.vscode-7.0.0-preview.23363.1.tgz",
    "nerdbank-gitversioning": "^3.6.79-alpha",
    "node-machine-id": "1.1.12",
    "ps-list": "7.2.0",
    "request-light": "0.7.0",
    "rxjs": "6.6.7",
    "semver": "7.5.4",
    "stream": "0.0.2",
    "strip-bom": "5.0.0",
    "strip-bom-buf": "2.0.0",
    "tmp": "0.0.33",
    "uuid": "^9.0.0",
    "vscode-html-languageservice": "^5.3.1",
    "vscode-jsonrpc": "9.0.0-next.7",
    "vscode-languageclient": "10.0.0-next.14",
    "vscode-languageserver-protocol": "3.17.6-next.12",
    "vscode-languageserver-textdocument": "1.0.12",
    "vscode-languageserver-types": "3.17.6-next.6",
    "vscode-nls": "5.0.1",
    "yauzl": "2.10.0"
  },
  "devDependencies": {
    "@jest/globals": "^29.6.2",
    "@types/archiver": "5.1.0",
    "@types/del": "3.0.1",
    "@types/fs-extra": "5.0.4",
    "@types/gulp": "4.0.5",
    "@types/minimist": "1.2.1",
    "@types/node": "20.14.8",
    "@types/semver": "7.3.13",
    "@types/tmp": "0.0.33",
    "@types/unzipper": "^0.9.1",
    "@types/uuid": "^9.0.1",
    "@types/vscode": "1.93.0",
    "@types/yauzl": "2.10.0",
    "@typescript-eslint/eslint-plugin": "^8.19.0",
    "@typescript-eslint/parser": "^8.19.0",
    "@vscode/l10n-dev": "^0.0.35",
    "@vscode/test-electron": "2.3.8",
    "@vscode/vsce": "3.0.0",
    "archiver": "5.3.0",
    "del": "3.0.0",
    "esbuild": "^0.25.0",
    "eslint": "^8.43.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-header": "^3.1.1",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-n": "^15.7.0",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-unicorn": "^47.0.0",
    "find-versions": "4.0.0",
    "get-port": "5.1.1",
    "glob-promise": "4.1.0",
    "gulp": "5.0.0",
    "jest": "^29.6.2",
    "jest-cli": "^29.6.4",
    "jest-junit": "^16.0.0",
    "js-yaml": ">=3.13.1",
    "minimatch": "3.0.5",
    "mock-http-server": "1.4.2",
    "octokit": "^3.1.0",
    "prettier": "2.8.8",
    "rimraf": "2.6.3",
    "source-map-support": "^0.5.21",
    "ts-jest": "^29.1.1",
    "ts-loader": "9.0.0",
    "ts-node": "9.1.1",
    "typescript": "5.6.2",
    "umd-compat-loader": "2.1.2",
    "unzipper": "0.10.11",
    "vscode-oniguruma": "^1.6.1",
    "vscode-textmate": "^6.0.0",
    "vscode-uri": "^3.0.7"
  },
  "runtimeDependencies": [
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Windows (.NET 4.7.2 / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-win-x64-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "x86_64"
      ],
      "installTestPath": "./.omnisharp/1.39.12/OmniSharp.exe",
      "platformId": "win-x64",
      "isFramework": true,
      "integrity": "A52562B44C9BAA2811F0A617F182A5886BB79BB1532850827D89F173D8C962B6"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Windows (.NET 6 / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-win-x64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "x86_64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "win-x64",
      "isFramework": false,
      "integrity": "21BB3F7D990B6D464A748E9C11731582CAEEAAB87D7F749EDEACFE136A09C13E"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Windows (.NET 4.7.2 / arm64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-win-arm64-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "arm64"
      ],
      "installTestPath": "./.omnisharp/1.39.12/OmniSharp.exe",
      "platformId": "win-arm64",
      "isFramework": true,
      "integrity": "E61CFBD416C9099D5710748281A0E07763ABE6D6EC930F31335B008DB6907780"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Windows (.NET 6 / arm64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-win-arm64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "arm64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "win-arm64",
      "isFramework": false,
      "integrity": "ECA34E2AEEB1775AAB664C5C06232EFBB57BB2CA6020A63FB92D24A0EE3A6906"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for OSX (Mono / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-osx-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "x86_64",
        "arm64"
      ],
      "binaries": [
        "./mono.osx",
        "./run"
      ],
      "installTestPath": "./.omnisharp/1.39.12/run",
      "platformId": "osx",
      "isFramework": true,
      "integrity": "645BD54508011CEF386FC765FA9E2DD6F6615120A6F611EF78DB2C41A3634C71"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for OSX (.NET 6 / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-osx-x64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "x86_64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "osx-x64",
      "isFramework": false,
      "integrity": "04A286EA36CE60AD1EBC83E16B114FD6663BDE840C43FD695067268A39B81CB1"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for OSX (.NET 6 / arm64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-osx-arm64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "arm64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "osx-arm64",
      "isFramework": false,
      "integrity": "44A197EBB3FC1AE55209FD3A125F2EDF6327F91A0E1EFC76025B5F7787CC4F94"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux (Mono / x86)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-x86-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86",
        "i686"
      ],
      "binaries": [
        "./mono.linux-x86",
        "./run"
      ],
      "installTestPath": "./.omnisharp/1.39.12/run",
      "platformId": "linux-x86",
      "isFramework": true,
      "integrity": "7C5691CCA9F617FBCCAA687F3624913428F31FF3213F689E25D62E17CBC0C2DE"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux (Mono / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-x64-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./mono.linux-x86_64",
        "./run"
      ],
      "installTestPath": "./.omnisharp/1.39.12/run",
      "platformId": "linux-x64",
      "isFramework": true,
      "integrity": "82997A2EC98CDC213712EE0F96FB5A0A6C0858889D26C6BD7DB2FA1269FD6CBA"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux (.NET 6 / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-x64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "linux-x64",
      "isFramework": false,
      "integrity": "7D65424EEEC4D0C06BAEE22D37465AD9718B626D4E9E9CA0E5FB95862630C049"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux (Mono / arm64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-arm64-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./mono.linux-arm64",
        "./run"
      ],
      "installTestPath": "./.omnisharp/1.39.12/run",
      "platformId": "linux-arm64",
      "isFramework": true,
      "integrity": "39478AE2072874258CC493055F7332FD9BEC7B3ED1FFF57280EB2D07CAFAE4BD"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux (.NET 6 / arm64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-arm64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "arm64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "linux-arm64",
      "isFramework": false,
      "integrity": "1A009CF2D62D1A6FE1646FFF03FED52633B019B49A71FB3D8CE74406224EA0C5"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux musl (.NET 6 / x64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-musl-x64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "linux-musl"
      ],
      "architectures": [
        "x86_64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "linux-musl-x64",
      "isFramework": false,
      "integrity": "FB97F4B0AB76823272B55CA3134FD5877C5651366CB88C678ED0445E86A8CD35"
    },
    {
      "id": "OmniSharp",
      "description": "OmniSharp for Linux musl (.NET 6 / arm64)",
      "url": "https://roslynomnisharp.blob.core.windows.net/releases/1.39.12/omnisharp-linux-musl-arm64-net6.0-1.39.12.zip",
      "installPath": ".omnisharp/1.39.12-net6.0",
      "platforms": [
        "linux-musl"
      ],
      "architectures": [
        "arm64"
      ],
      "installTestPath": "./.omnisharp/1.39.12-net6.0/OmniSharp.dll",
      "platformId": "linux-musl-arm64",
      "isFramework": false,
      "integrity": "9944EBD6EE06BD595BCADD3057CD9BEF4105C3A3952DAE03E54F3114E2E6661F"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (Windows / x64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-win7-x64.zip",
      "installPath": ".debugger/x86_64",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "x86_64",
        "arm64"
      ],
      "installTestPath": "./.debugger/x86_64/vsdbg-ui.exe",
      "integrity": "5C7C000F23267EB15FE6D517156417508C772AD6CEB4D7D8AFAE4CD81B826452"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (Windows / ARM64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-win10-arm64.zip",
      "installPath": ".debugger/arm64",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "arm64"
      ],
      "installTestPath": "./.debugger/arm64/vsdbg-ui.exe",
      "integrity": "86E2B48A5F405CFF4A99A3C4236DE7355DFF8F9EFEBE1A204B21B80CD140F394"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (macOS / x64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-osx-x64.zip",
      "installPath": ".debugger/x86_64",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "x86_64",
        "arm64"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/x86_64/vsdbg-ui",
      "integrity": "16BAC2DEBD47C23B3682801E263395492BEE73BF2DD326BF132A397B7A08984E"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (macOS / arm64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-osx-arm64.zip",
      "installPath": ".debugger/arm64",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/arm64/vsdbg-ui",
      "integrity": "C335E8E06F8391B2CF2F85352D62ED736FD3CEF1A37BEEE9E47700EC8CD454DC"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (linux / ARM)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-linux-arm.zip",
      "installPath": ".debugger",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "arm"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/vsdbg-ui",
      "integrity": "552FD02F8C89616498CF95FE1F9229C69E1AE2A594E63CA6989405397CE37BE6"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (linux / ARM64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-linux-arm64.zip",
      "installPath": ".debugger",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/vsdbg-ui",
      "integrity": "EF74A61BA674B926F4570EE0FF8A2FDEE5ABC5BF1400980B1D750CF459D0576F"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (linux musl / x64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-linux-musl-x64.zip",
      "installPath": ".debugger",
      "platforms": [
        "linux-musl"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/vsdbg-ui",
      "integrity": "3A68871DA6C875FF1DE326D29C8A1068C0CBF81DC8455854C6D1F8A84D6327CD"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (linux musl / ARM64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-linux-musl-arm64.zip",
      "installPath": ".debugger",
      "platforms": [
        "linux-musl"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/vsdbg-ui",
      "integrity": "5551419BE51F923CC2B3A566760ED88368F191C75162CBAAB55B66BE6B67ECAE"
    },
    {
      "id": "Debugger",
      "description": ".NET Core Debugger (linux / x64)",
      "url": "https://vsdebugger-cyg0dxb6czfafzaz.b01.azurefd.net/coreclr-debug-2-81-0/coreclr-debug-linux-x64.zip",
      "installPath": ".debugger",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./vsdbg-ui",
        "./vsdbg"
      ],
      "installTestPath": "./.debugger/vsdbg-ui",
      "integrity": "4BC2101C38261EDAB3BBAE6DA2CC2D5B08D4FD85E19A2A8C9764778E54AC4A66"
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (Windows / x64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/8d42e62ea4051381c219b3e31bc4eced/razorlanguageserver-win-x64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "x86_64"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (Windows / ARM64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/4ef26e45cf32fe8d51c0e7dd21f1fef6/razorlanguageserver-win-arm64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "win32"
      ],
      "architectures": [
        "arm64"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (Linux / x64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/6d4e23a3c7cf0465743950a39515a716/razorlanguageserver-linux-x64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./rzls"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (Linux ARM64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/85deebd44647ebf65724cc291d722283/razorlanguageserver-linux-arm64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "linux"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./rzls"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (Linux musl / x64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/4f0caa94ae182785655efb15eafcef23/razorlanguageserver-linux-musl-x64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "linux-musl"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./rzls"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (Linux musl ARM64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/0a24828206a6f3b4bc743d058ef88ce7/razorlanguageserver-linux-musl-arm64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "linux-musl"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./rzls"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (macOS / x64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/2afcafaf41082989efcc10405abb9314/razorlanguageserver-osx-x64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "x86_64"
      ],
      "binaries": [
        "./rzls"
      ]
    },
    {
      "id": "RazorOmnisharp",
      "description": "Razor Language Server for OmniSharp (macOS ARM64)",
      "url": "https://download.visualstudio.microsoft.com/download/pr/aee63398-023f-48db-bba2-30162c68f0c4/8bf2ed2f00d481a5987e3eb5165afddd/razorlanguageserver-osx-arm64-7.0.0-preview.23363.1.zip",
      "installPath": ".razoromnisharp",
      "platforms": [
        "darwin"
      ],
      "architectures": [
        "arm64"
      ],
      "binaries": [
        "./rzls"
      ]
    }
  ],
  "engines": {
    "vscode": "^1.93.0"
  },
  "activationEvents": [
    "onDebugInitialConfigurations",
    "onDebugResolve:blazorwasm",
    "onDebugResolve:coreclr",
    "onDebugResolve:clr",
    "onDebugResolve:monovsdbg",
    "onDebugResolve:dotnet",
    "onLanguage:csharp",
    "onCommand:o.showOutput",
    "onCommand:omnisharp.registerLanguageMiddleware",
    "workspaceContains:**/*.{csproj,csx,cake}"
  ],
  "contributes": {
    "themes": [
      {
        "label": "Visual Studio 2019 Dark",
        "uiTheme": "vs-dark",
        "path": "./themes/vs2019_dark.json"
      },
      {
        "label": "Visual Studio 2019 Light",
        "uiTheme": "vs",
        "path": "./themes/vs2019_light.json"
      }
    ],
    "configuration": [
      {
        "title": "Project",
        "order": 0,
        "properties": {
          "dotnet.defaultSolution": {
            "type": "string",
            "description": "%configuration.dotnet.defaultSolution.description%",
            "order": 0
          }
        }
      },
      {
        "title": "Text Editor",
        "order": 1,
        "properties": {
          "dotnet.autoInsert.enableAutoInsert": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.autoInsert.enableAutoInsert%"
          },
          "dotnet.formatting.organizeImportsOnFormat": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.formatting.organizeImportsOnFormat%"
          },
          "dotnet.typeMembers.memberInsertionLocation": {
            "type": "string",
            "enum": [
              "withOtherMembersOfTheSameKind",
              "atTheEnd"
            ],
            "default": "withOtherMembersOfTheSameKind",
            "enumDescriptions": [
              "%configuration.dotnet.typeMembers.memberInsertionLocation.withOtherMembersOfTheSameKind%",
              "%configuration.dotnet.typeMembers.memberInsertionLocation.atTheEnd%"
            ],
            "description": "%configuration.dotnet.typeMembers.memberInsertionLocation%",
            "order": 10
          },
          "dotnet.typeMembers.propertyGenerationBehavior": {
            "type": "string",
            "enum": [
              "preferThrowingProperties",
              "preferAutoProperties"
            ],
            "default": "preferThrowingProperties",
            "enumDescriptions": [
              "%configuration.dotnet.typeMembers.propertyGenerationBehavior.preferThrowingProperties%",
              "%configuration.dotnet.typeMembers.propertyGenerationBehavior.preferAutoProperties%"
            ],
            "description": "%configuration.dotnet.typeMembers.propertyGenerationBehavior%",
            "order": 10
          },
          "dotnet.codeLens.enableReferencesCodeLens": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.codeLens.enableReferencesCodeLens%"
          },
          "dotnet.codeLens.enableTestsCodeLens": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.codeLens.enableTestsCodeLens%"
          },
          "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.completion.showCompletionItemsFromUnimportedNamespaces%",
            "order": 20
          },
          "dotnet.completion.showNameCompletionSuggestions": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.completion.showNameCompletionSuggestions%",
            "order": 20
          },
          "dotnet.completion.provideRegexCompletions": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.completion.provideRegexCompletions%",
            "order": 20
          },
          "dotnet.completion.triggerCompletionInArgumentLists": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.completion.triggerCompletionInArgumentLists%",
            "order": 20
          },
          "dotnet.backgroundAnalysis.analyzerDiagnosticsScope": {
            "type": "string",
            "enum": [
              "openFiles",
              "fullSolution",
              "none"
            ],
            "default": "openFiles",
            "enumDescriptions": [
              "%configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.openFiles%",
              "%configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.fullSolution%",
              "%configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.none%"
            ],
            "description": "%configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope%",
            "order": 30
          },
          "dotnet.backgroundAnalysis.compilerDiagnosticsScope": {
            "type": "string",
            "enum": [
              "openFiles",
              "fullSolution",
              "none"
            ],
            "default": "openFiles",
            "enumDescriptions": [
              "%configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.openFiles%",
              "%configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.fullSolution%",
              "%configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.none%"
            ],
            "description": "%configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope%",
            "order": 30
          },
          "dotnet.diagnostics.reportInformationAsHint": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.diagnostics.reportInformationAsHint%",
            "order": 30
          },
          "dotnet.highlighting.highlightRelatedRegexComponents": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.highlighting.highlightRelatedRegexComponents%",
            "order": 40
          },
          "dotnet.highlighting.highlightRelatedJsonComponents": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.highlighting.highlightRelatedJsonComponents%",
            "order": 40
          },
          "csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.csharp.inlayHints.enableInlayHintsForImplicitObjectCreation%",
            "order": 50
          },
          "csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.csharp.inlayHints.enableInlayHintsForImplicitVariableTypes%",
            "order": 50
          },
          "csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.csharp.inlayHints.enableInlayHintsForLambdaParameterTypes%",
            "order": 50
          },
          "csharp.inlayHints.enableInlayHintsForTypes": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.csharp.inlayHints.enableInlayHintsForTypes%",
            "order": 50
          },
          "dotnet.inlayHints.enableInlayHintsForIndexerParameters": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.csharp.inlayHints.enableInlayHintsForIndexerParameters%",
            "order": 50
          },
          "dotnet.inlayHints.enableInlayHintsForLiteralParameters": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.enableInlayHintsForLiteralParameters%",
            "order": 50
          },
          "dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.enableInlayHintsForObjectCreationParameters%",
            "order": 50
          },
          "dotnet.inlayHints.enableInlayHintsForOtherParameters": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.enableInlayHintsForOtherParameters%",
            "order": 50
          },
          "dotnet.inlayHints.enableInlayHintsForParameters": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.enableInlayHintsForParameters%",
            "order": 50
          },
          "dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix%",
            "order": 50
          },
          "dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName%",
            "order": 50
          },
          "dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent%",
            "order": 50
          },
          "dotnet.navigation.navigateToDecompiledSources": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.navigation.navigateToDecompiledSources%",
            "order": 60
          },
          "dotnet.navigation.navigateToSourceLinkAndEmbeddedSources": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.navigation.navigateToSourceLinkAndEmbeddedSources%",
            "order": 60
          },
          "dotnet.quickInfo.showRemarksInQuickInfo": {
            "type": "boolean",
            "default": "true",
            "description": "%configuration.dotnet.quickInfo.showRemarksInQuickInfo%",
            "order": 70
          },
          "dotnet.symbolSearch.searchReferenceAssemblies": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.symbolSearch.searchReferenceAssemblies%",
            "order": 80
          }
        }
      },
      {
        "title": "Debugger",
        "order": 8,
        "properties": {
          "csharp.debug.stopAtEntry": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.stopAtEntry.markdownDescription%",
            "default": false
          },
          "csharp.debug.console": {
            "type": "string",
            "enum": [
              "internalConsole",
              "integratedTerminal",
              "externalTerminal"
            ],
            "enumDescriptions": [
              "%generateOptionsSchema.console.internalConsole.enumDescription%",
              "%generateOptionsSchema.console.integratedTerminal.enumDescription%",
              "%generateOptionsSchema.console.externalTerminal.enumDescription%"
            ],
            "markdownDescription": "%generateOptionsSchema.console.settingsDescription%",
            "default": "internalConsole"
          },
          "csharp.debug.sourceFileMap": {
            "type": "object",
            "markdownDescription": "%generateOptionsSchema.sourceFileMap.markdownDescription%",
            "additionalProperties": {
              "type": "string"
            },
            "default": {}
          },
          "csharp.debug.justMyCode": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.justMyCode.markdownDescription%",
            "default": true
          },
          "csharp.debug.requireExactSource": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.requireExactSource.markdownDescription%",
            "default": true
          },
          "csharp.debug.enableStepFiltering": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.enableStepFiltering.markdownDescription%",
            "default": true
          },
          "csharp.debug.logging.exceptions": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.exceptions.markdownDescription%",
            "default": true
          },
          "csharp.debug.logging.moduleLoad": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.moduleLoad.markdownDescription%",
            "default": true
          },
          "csharp.debug.logging.programOutput": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.programOutput.markdownDescription%",
            "default": true
          },
          "csharp.debug.logging.browserStdOut": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.browserStdOut.markdownDescription%",
            "default": true
          },
          "csharp.debug.logging.elapsedTiming": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.elapsedTiming.markdownDescription%",
            "default": false
          },
          "csharp.debug.logging.threadExit": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.threadExit.markdownDescription%",
            "default": false
          },
          "csharp.debug.logging.processExit": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.processExit.markdownDescription%",
            "default": true
          },
          "csharp.debug.logging.engineLogging": {
            "type": "boolean",
            "deprecationMessage": "%generateOptionsSchema.logging.engineLogging.deprecationMessage%",
            "default": false
          },
          "csharp.debug.logging.diagnosticsLog.protocolMessages": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription%",
            "default": false
          },
          "csharp.debug.logging.diagnosticsLog.dispatcherMessages": {
            "type": "string",
            "enum": [
              "none",
              "error",
              "important",
              "normal"
            ],
            "enumDescriptions": [
              "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription%",
              "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription%",
              "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription%",
              "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription%"
            ],
            "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription%",
            "default": "none"
          },
          "csharp.debug.logging.diagnosticsLog.debugEngineAPITracing": {
            "type": "string",
            "enum": [
              "none",
              "error",
              "all"
            ],
            "enumDescriptions": [
              "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription%",
              "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription%",
              "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription%"
            ],
            "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription%",
            "default": "none"
          },
          "csharp.debug.logging.diagnosticsLog.debugRuntimeEventTracing": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription%",
            "default": false
          },
          "csharp.debug.logging.diagnosticsLog.expressionEvaluationTracing": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription%",
            "default": false
          },
          "csharp.debug.logging.diagnosticsLog.startDebuggingTracing": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription%",
            "default": false
          },
          "csharp.debug.logging.consoleUsageMessage": {
            "type": "boolean",
            "description": "%generateOptionsSchema.logging.consoleUsageMessage.description%",
            "default": true
          },
          "csharp.debug.suppressJITOptimizations": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.suppressJITOptimizations.markdownDescription%",
            "default": false
          },
          "csharp.debug.symbolOptions.searchPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "%generateOptionsSchema.symbolOptions.searchPaths.description%",
            "default": []
          },
          "csharp.debug.symbolOptions.searchMicrosoftSymbolServer": {
            "type": "boolean",
            "description": "%generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description%",
            "default": false
          },
          "csharp.debug.symbolOptions.searchNuGetOrgSymbolServer": {
            "type": "boolean",
            "description": "%generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description%",
            "default": false
          },
          "csharp.debug.symbolOptions.cachePath": {
            "type": "string",
            "description": "%generateOptionsSchema.symbolOptions.cachePath.description%",
            "default": ""
          },
          "csharp.debug.symbolOptions.moduleFilter.mode": {
            "type": "string",
            "enum": [
              "loadAllButExcluded",
              "loadOnlyIncluded"
            ],
            "enumDescriptions": [
              "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription%",
              "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription%"
            ],
            "description": "%generateOptionsSchema.symbolOptions.moduleFilter.mode.description%",
            "default": "loadAllButExcluded"
          },
          "csharp.debug.symbolOptions.moduleFilter.excludedModules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "%generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description%",
            "default": []
          },
          "csharp.debug.symbolOptions.moduleFilter.includedModules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description%",
            "default": []
          },
          "csharp.debug.symbolOptions.moduleFilter.includeSymbolsNextToModules": {
            "type": "boolean",
            "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description%",
            "default": true
          },
          "csharp.debug.symbolOptions.moduleFilter.includeSymbolsOnDemand": {
            "type": "boolean",
            "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description%",
            "default": true
          },
          "csharp.debug.expressionEvaluationOptions.allowImplicitFuncEval": {
            "type": "boolean",
            "description": "%generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description%",
            "default": true
          },
          "csharp.debug.expressionEvaluationOptions.allowToString": {
            "type": "boolean",
            "markdownDescription": "%generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription%",
            "default": true
          },
          "csharp.debug.expressionEvaluationOptions.allowFastEvaluate": {
            "type": "boolean",
            "description": "%generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description%",
            "default": true
          },
          "csharp.debug.expressionEvaluationOptions.showRawValues": {
            "type": "boolean",
            "description": "%generateOptionsSchema.expressionEvaluationOptions.showRawValues.description%",
            "default": false
          },
          "dotnet.unitTestDebuggingOptions": {
            "type": "object",
            "description": "%configuration.dotnet.unitTestDebuggingOptions%",
            "default": {},
            "properties": {
              "sourceFileMap": {
                "type": "object",
                "markdownDescription": "%generateOptionsSchema.sourceFileMap.markdownDescription%",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "justMyCode": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.justMyCode.markdownDescription%",
                "default": true
              },
              "requireExactSource": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.requireExactSource.markdownDescription%",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.enableStepFiltering.markdownDescription%",
                "default": true
              },
              "logging": {
                "description": "%generateOptionsSchema.logging.description%",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.exceptions.markdownDescription%",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.moduleLoad.markdownDescription%",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.programOutput.markdownDescription%",
                    "default": true
                  },
                  "threadExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.threadExit.markdownDescription%",
                    "default": false
                  },
                  "processExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.processExit.markdownDescription%",
                    "default": true
                  }
                }
              },
              "suppressJITOptimizations": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.suppressJITOptimizations.markdownDescription%",
                "default": false
              },
              "symbolOptions": {
                "description": "%generateOptionsSchema.symbolOptions.description%",
                "default": {
                  "searchPaths": [],
                  "searchMicrosoftSymbolServer": false,
                  "searchNuGetOrgSymbolServer": false
                },
                "type": "object",
                "properties": {
                  "searchPaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.symbolOptions.searchPaths.description%",
                    "default": []
                  },
                  "searchMicrosoftSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description%",
                    "default": false
                  },
                  "searchNuGetOrgSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description%",
                    "default": false
                  },
                  "cachePath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.symbolOptions.cachePath.description%",
                    "default": ""
                  },
                  "moduleFilter": {
                    "description": "%generateOptionsSchema.symbolOptions.moduleFilter.description%",
                    "default": {
                      "mode": "loadAllButExcluded",
                      "excludedModules": []
                    },
                    "type": "object",
                    "required": [
                      "mode"
                    ],
                    "properties": {
                      "mode": {
                        "type": "string",
                        "enum": [
                          "loadAllButExcluded",
                          "loadOnlyIncluded"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription%",
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription%"
                        ],
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.mode.description%",
                        "default": "loadAllButExcluded"
                      },
                      "excludedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description%",
                        "default": []
                      },
                      "includedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description%",
                        "default": []
                      },
                      "includeSymbolsNextToModules": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description%",
                        "default": true
                      },
                      "includeSymbolsOnDemand": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description%",
                        "default": true
                      }
                    }
                  }
                }
              },
              "sourceLinkOptions": {
                "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.markdownDescription%",
                "default": {
                  "*": {
                    "enabled": true
                  }
                },
                "type": "object",
                "additionalItems": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "title": "boolean",
                      "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription%",
                      "default": true
                    }
                  }
                }
              },
              "expressionEvaluationOptions": {
                "description": "%generateOptionsSchema.expressionEvaluationOptions.description%",
                "default": {},
                "type": "object",
                "properties": {
                  "allowImplicitFuncEval": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description%",
                    "default": true
                  },
                  "allowToString": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription%",
                    "default": true
                  },
                  "allowFastEvaluate": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description%",
                    "default": true
                  },
                  "showRawValues": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.showRawValues.description%",
                    "default": false
                  }
                }
              },
              "targetArchitecture": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.targetArchitecture.markdownDescription%",
                "enum": [
                  "x86_64",
                  "arm64"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "coreclr",
                  "clr"
                ],
                "markdownDescription": "%generateOptionsSchema.type.markdownDescription%",
                "default": "coreclr"
              },
              "debugServer": {
                "type": "number",
                "description": "%generateOptionsSchema.debugServer.description%",
                "default": 4711
              }
            }
          },
          "dotnet.unitTests.runSettingsPath": {
            "type": "string",
            "markdownDescription": "%configuration.dotnet.unitTests.runSettingsPath%"
          }
        }
      },
      {
        "title": "LSP Server",
        "order": 9,
        "properties": {
          "dotnet.preferCSharpExtension": {
            "scope": "window",
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.preferCSharpExtension%"
          },
          "dotnet.server.path": {
            "type": "string",
            "scope": "machine-overridable",
            "description": "%configuration.dotnet.server.path%"
          },
          "dotnet.server.componentPaths": {
            "type": "object",
            "description": "%configuration.dotnet.server.componentPaths%",
            "properties": {
              "roslynDevKit": {
                "description": "%configuration.dotnet.server.componentPaths.roslynDevKit%",
                "type": "string"
              },
              "xamlTools": {
                "description": "%configuration.dotnet.server.componentPaths.xamlTools%",
                "type": "string"
              }
            },
            "default": {}
          },
          "dotnet.server.startTimeout": {
            "type": "number",
            "scope": "machine-overridable",
            "default": 120000,
            "description": "%configuration.dotnet.server.startTimeout%"
          },
          "dotnet.server.waitForDebugger": {
            "type": "boolean",
            "scope": "machine-overridable",
            "default": false,
            "description": "%configuration.dotnet.server.waitForDebugger%"
          },
          "dotnet.server.extensionPaths": {
            "scope": "machine-overridable",
            "type": [
              "array",
              null
            ],
            "items": {
              "type": "string"
            },
            "default": null,
            "description": "%configuration.dotnet.server.extensionPaths%"
          },
          "dotnet.server.crashDumpPath": {
            "scope": "machine-overridable",
            "type": "string",
            "default": null,
            "description": "%configuration.dotnet.server.crashDumpPath%"
          },
          "dotnet.server.suppressLspErrorToasts": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.server.suppressLspErrorToasts%"
          },
          "dotnet.server.suppressMiscellaneousFilesToasts": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.dotnet.server.suppressMiscellaneousFilesToasts%"
          },
          "dotnet.server.useServerGC": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.server.useServerGC%"
          },
          "dotnet.enableXamlTools": {
            "scope": "machine-overridable",
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.enableXamlTools%"
          },
          "dotnet.projects.binaryLogPath": {
            "scope": "machine-overridable",
            "type": "string",
            "default": null,
            "description": "%configuration.dotnet.projects.binaryLogPath%"
          },
          "dotnet.projects.enableAutomaticRestore": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.projects.enableAutomaticRestore%"
          },
          "dotnet.projects.enableFileBasedPrograms": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.dotnet.projects.enableFileBasedPrograms%",
            "tags": [
              "preview"
            ]
          },
          "razor.languageServer.directory": {
            "type": "string",
            "scope": "machine-overridable",
            "description": "%configuration.razor.languageServer.directory%",
            "order": 90
          },
          "razor.languageServer.debug": {
            "type": "boolean",
            "scope": "machine-overridable",
            "default": false,
            "description": "%configuration.razor.languageServer.debug%",
            "order": 90
          },
          "razor.languageServer.forceRuntimeCodeGeneration": {
            "type": "boolean",
            "scope": "machine-overridable",
            "default": true,
            "description": "%configuration.razor.languageServer.forceRuntimeCodeGeneration%",
            "order": 90,
            "tags": [
              "experimental"
            ]
          },
          "razor.languageServer.suppressLspErrorToasts": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.razor.languageServer.suppressLspErrorToasts%"
          },
          "razor.languageServer.useNewFormattingEngine": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.razor.languageServer.useNewFormattingEngine%"
          },
          "razor.languageServer.cohostingEnabled": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.razor.languageServer.cohostingEnabled%",
            "tags": [
              "experimental"
            ]
          }
        }
      },
      {
        "title": "OmniSharp",
        "order": 10,
        "properties": {
          "dotnet.server.useOmnisharp": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.dotnet.server.useOmnisharp%",
            "order": 0
          },
          "omnisharp.dotnetPath": {
            "type": "string",
            "scope": "machine-overridable",
            "description": "%configuration.omnisharp.dotnetPath%"
          },
          "csharp.format.enable": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.csharp.format.enable%"
          },
          "csharp.suppressDotnetInstallWarning": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.csharp.suppressDotnetInstallWarning%"
          },
          "csharp.suppressDotnetRestoreNotification": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.csharp.suppressDotnetRestoreNotification%"
          },
          "csharp.suppressProjectJsonWarning": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.csharp.suppressProjectJsonWarning%"
          },
          "csharp.suppressBuildAssetsNotification": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.csharp.suppressBuildAssetsNotification%"
          },
          "csharp.suppressHiddenDiagnostics": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.csharp.suppressHiddenDiagnostics%"
          },
          "csharp.referencesCodeLens.filteredSymbols": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "%configuration.omnisharp.csharp.referencesCodeLens.filteredSymbols%"
          },
          "csharp.maxProjectFileCountForDiagnosticAnalysis": {
            "type": "number",
            "default": 1000,
            "description": "%configuration.omnisharp.csharp.maxProjectFileCountForDiagnosticAnalysis%"
          },
          "csharp.semanticHighlighting.enabled": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.csharp.semanticHighlighting.enabled%",
            "scope": "window"
          },
          "csharp.showOmnisharpLogOnError": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.csharp.showOmnisharpLogOnError%"
          },
          "omnisharp.useModernNet": {
            "type": "boolean",
            "default": true,
            "scope": "window",
            "title": "%configuration.omnisharp.useModernNet.title%",
            "description": "%configuration.omnisharp.useModernNet.description%"
          },
          "omnisharp.sdkPath": {
            "type": "string",
            "scope": "window",
            "description": "%configuration.omnisharp.sdkPath%"
          },
          "omnisharp.sdkVersion": {
            "type": "string",
            "scope": "window",
            "description": "%configuration.omnisharp.sdkVersion%"
          },
          "omnisharp.sdkIncludePrereleases": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "%configuration.omnisharp.sdkIncludePrereleases%"
          },
          "omnisharp.monoPath": {
            "type": "string",
            "scope": "machine",
            "description": "%configuration.omnisharp.monoPath%"
          },
          "omnisharp.loggingLevel": {
            "type": "string",
            "default": "information",
            "enum": [
              "trace",
              "debug",
              "information",
              "warning",
              "error",
              "critical"
            ],
            "description": "%configuration.omnisharp.loggingLevel%"
          },
          "omnisharp.autoStart": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.autoStart%"
          },
          "omnisharp.projectFilesExcludePattern": {
            "type": "string",
            "default": "**/node_modules/**,**/.git/**,**/bower_components/**",
            "description": "%configuration.omnisharp.projectFilesExcludePattern%"
          },
          "omnisharp.projectLoadTimeout": {
            "type": "number",
            "default": 60,
            "description": "%configuration.omnisharp.projectLoadTimeout%"
          },
          "omnisharp.maxProjectResults": {
            "type": "number",
            "default": 250,
            "description": "%configuration.omnisharp.maxProjectResults%"
          },
          "omnisharp.useEditorFormattingSettings": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.useEditorFormattingSettings%"
          },
          "omnisharp.minFindSymbolsFilterLength": {
            "type": "number",
            "default": 0,
            "description": "%configuration.omnisharp.minFindSymbolsFilterLength%"
          },
          "omnisharp.maxFindSymbolsItems": {
            "type": "number",
            "default": 1000,
            "description": "%configuration.omnisharp.maxFindSymbolsItems%"
          },
          "omnisharp.disableMSBuildDiagnosticWarning": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.disableMSBuildDiagnosticWarning%"
          },
          "omnisharp.enableMsBuildLoadProjectsOnDemand": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.enableMsBuildLoadProjectsOnDemand%"
          },
          "omnisharp.enableEditorConfigSupport": {
            "type": "boolean",
            "default": true,
            "description": "%configuration.omnisharp.enableEditorConfigSupport%"
          },
          "omnisharp.enableDecompilationSupport": {
            "type": "boolean",
            "default": false,
            "scope": "machine",
            "description": "%configuration.omnisharp.enableDecompilationSupport%"
          },
          "omnisharp.enableLspDriver": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.enableLspDriver%",
            "tags": [
              "experimental"
            ]
          },
          "omnisharp.enableAsyncCompletion": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.enableAsyncCompletion%",
            "tags": [
              "experimental"
            ]
          },
          "omnisharp.dotNetCliPaths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "%configuration.omnisharp.dotNetCliPaths%",
            "uniqueItems": true
          },
          "razor.plugin.path": {
            "type": "string",
            "scope": "machine",
            "description": "%configuration.omnisharp.razor.plugin.path%"
          },
          "razor.devmode": {
            "type": "boolean",
            "default": false,
            "description": "%configuration.omnisharp.razor.devmode%"
          },
          "razor.format.enable": {
            "type": "boolean",
            "scope": "window",
            "default": true,
            "description": "%configuration.omnisharp.razor.format.enable%"
          },
          "razor.format.codeBlockBraceOnNextLine": {
            "type": "boolean",
            "scope": "window",
            "default": false,
            "description": "%configuration.omnisharp.razor.format.codeBlockBraceOnNextLine%"
          },
          "razor.completion.commitElementsWithSpace": {
            "type": "boolean",
            "scope": "window",
            "default": false,
            "description": "%configuration.omnisharp.razor.completion.commitElementsWithSpace%"
          }
        }
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          "appsettings.json",
          "appsettings.*.json"
        ],
        "url": "https://json.schemastore.org/appsettings"
      },
      {
        "fileMatch": "omnisharp.json",
        "url": "http://json.schemastore.org/omnisharp"
      },
      {
        "fileMatch": "global.json",
        "url": "http://json.schemastore.org/global"
      },
      {
        "fileMatch": "launchSettings.json",
        "url": "https://json.schemastore.org/launchsettings.json"
      }
    ],
    "commands": [
      {
        "command": "o.restart",
        "title": "%command.o.restart%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "o.pickProjectAndStart",
        "title": "%command.o.pickProjectAndStart%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "dotnet.openSolution",
        "title": "%command.dotnet.openSolution%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'Roslyn'"
      },
      {
        "command": "o.fixAll.solution",
        "title": "%command.o.fixAll.solution%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "o.fixAll.project",
        "title": "%command.o.fixAll.project%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "o.fixAll.document",
        "title": "%command.o.fixAll.document%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "o.reanalyze.allProjects",
        "title": "%command.o.reanalyze.allProjects%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "o.reanalyze.currentProject",
        "title": "%command.o.reanalyze.currentProject%",
        "category": "OmniSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "dotnet.generateAssets",
        "title": "%command.dotnet.generateAssets.currentProject%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'RoslynDevKit' || dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "dotnet.restore.project",
        "title": "%command.dotnet.restore.project%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "dotnet.restore.all",
        "title": "%command.dotnet.restore.all%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "csharp.listProcess",
        "title": "%command.csharp.listProcess%",
        "category": "CSharp"
      },
      {
        "command": "csharp.listRemoteProcess",
        "title": "%command.csharp.listRemoteProcess%",
        "category": "CSharp"
      },
      {
        "command": "csharp.listRemoteDockerProcess",
        "title": "%command.csharp.listRemoteDockerProcess%",
        "category": "CSharp"
      },
      {
        "command": "csharp.attachToProcess",
        "title": "%command.csharp.attachToProcess%",
        "category": "Debug"
      },
      {
        "command": "csharp.reportIssue",
        "title": "%command.csharp.reportIssue%",
        "category": "CSharp"
      },
      {
        "command": "csharp.showDecompilationTerms",
        "title": "%command.csharp.showDecompilationTerms%",
        "category": "CSharp",
        "enablement": "dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "extension.showRazorCSharpWindow",
        "title": "%command.extension.showRazorCSharpWindow%",
        "category": "Razor",
        "enablement": "razor.mode == 'lsp'"
      },
      {
        "command": "extension.showRazorHtmlWindow",
        "title": "%command.extension.showRazorHtmlWindow%",
        "category": "Razor",
        "enablement": "razor.mode == 'lsp'"
      },
      {
        "command": "razor.reportIssue",
        "title": "%command.razor.reportIssue%",
        "category": "Razor"
      },
      {
        "command": "dotnet.test.runTestsInContext",
        "title": "%command.dotnet.test.runTestsInContext%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "dotnet.test.debugTestsInContext",
        "title": "%command.dotnet.test.debugTestsInContext%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
      },
      {
        "command": "dotnet.restartServer",
        "title": "%command.dotnet.restartServer%",
        "category": ".NET",
        "enablement": "dotnet.server.activationContext == 'Roslyn'"
      }
    ],
    "keybindings": [
      {
        "command": "o.showOutput",
        "key": "Ctrl+Shift+F9",
        "mac": "Cmd+Shift+F9"
      }
    ],
    "snippets": [
      {
        "language": "csharp",
        "path": "./snippets/csharp.json"
      }
    ],
    "breakpoints": [
      {
        "language": "csharp"
      },
      {
        "language": "razor"
      },
      {
        "language": "qsharp"
      },
      {
        "language": "aspnetcorerazor"
      }
    ],
    "debuggers": [
      {
        "type": "coreclr",
        "label": ".NET 5+ and .NET Core",
        "hiddenWhen": "dotnet.debug.serviceBrokerAvailable",
        "languages": [
          "csharp",
          "razor",
          "qsharp",
          "aspnetcorerazor"
        ],
        "variables": {
          "pickProcess": "csharp.listProcess",
          "pickRemoteProcess": "csharp.listRemoteProcess",
          "pickRemoteDockerProcess": "csharp.listRemoteDockerProcess"
        },
        "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
        "configurationAttributes": {
          "launch": {
            "type": "object",
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.program.markdownDescription%",
                "default": "${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"
              },
              "cwd": {
                "type": "string",
                "description": "%generateOptionsSchema.cwd.description%",
                "default": "${workspaceFolder}"
              },
              "args": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "%generateOptionsSchema.args.0.description%",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  {
                    "type": "string",
                    "description": "%generateOptionsSchema.args.1.description%",
                    "default": ""
                  }
                ]
              },
              "stopAtEntry": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.stopAtEntry.markdownDescription%",
                "default": false
              },
              "launchBrowser": {
                "description": "%generateOptionsSchema.launchBrowser.description%",
                "default": {
                  "enabled": true
                },
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.launchBrowser.enabled.description%",
                    "default": true
                  },
                  "args": {
                    "type": "string",
                    "description": "%generateOptionsSchema.launchBrowser.args.description%",
                    "default": "${auto-detect-url}"
                  },
                  "osx": {
                    "description": "%generateOptionsSchema.launchBrowser.osx.description%",
                    "default": {
                      "command": "open",
                      "args": "${auto-detect-url}"
                    },
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.osx.command.description%",
                        "default": "open"
                      },
                      "args": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.osx.args.description%",
                        "default": "${auto-detect-url}"
                      }
                    }
                  },
                  "linux": {
                    "description": "%generateOptionsSchema.launchBrowser.linux.description%",
                    "default": {
                      "command": "xdg-open",
                      "args": "${auto-detect-url}"
                    },
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.linux.command.description%",
                        "default": "xdg-open"
                      },
                      "args": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.linux.args.description%",
                        "default": "${auto-detect-url}"
                      }
                    }
                  },
                  "windows": {
                    "description": "%generateOptionsSchema.launchBrowser.windows.description%",
                    "default": {
                      "command": "cmd.exe",
                      "args": "/C start ${auto-detect-url}"
                    },
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.windows.command.description%",
                        "default": "cmd.exe"
                      },
                      "args": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.windows.args.description%",
                        "default": "/C start ${auto-detect-url}"
                      }
                    }
                  }
                }
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "%generateOptionsSchema.env.description%",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.envFile.markdownDescription%",
                "default": "${workspaceFolder}/.env"
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "%generateOptionsSchema.console.internalConsole.enumDescription%",
                  "%generateOptionsSchema.console.integratedTerminal.enumDescription%",
                  "%generateOptionsSchema.console.externalTerminal.enumDescription%"
                ],
                "markdownDescription": "%generateOptionsSchema.console.markdownDescription%",
                "settingsDescription": "%generateOptionsSchema.console.settingsDescription%",
                "default": "internalConsole"
              },
              "externalConsole": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.externalConsole.markdownDescription%",
                "default": false
              },
              "launchSettingsFilePath": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.launchSettingsFilePath.markdownDescription%",
                "default": "${workspaceFolder}/Properties/launchSettings.json"
              },
              "launchSettingsProfile": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "%generateOptionsSchema.launchSettingsProfile.description%",
                "default": "<insert-profile-name>"
              },
              "sourceFileMap": {
                "type": "object",
                "markdownDescription": "%generateOptionsSchema.sourceFileMap.markdownDescription%",
                "additionalProperties": {
                  "type": "string"
                },
                "default": {}
              },
              "justMyCode": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.justMyCode.markdownDescription%",
                "default": true
              },
              "requireExactSource": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.requireExactSource.markdownDescription%",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.enableStepFiltering.markdownDescription%",
                "default": true
              },
              "logging": {
                "description": "%generateOptionsSchema.logging.description%",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.exceptions.markdownDescription%",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.moduleLoad.markdownDescription%",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.programOutput.markdownDescription%",
                    "default": true
                  },
                  "browserStdOut": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.browserStdOut.markdownDescription%",
                    "default": true
                  },
                  "elapsedTiming": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.elapsedTiming.markdownDescription%",
                    "default": false
                  },
                  "threadExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.threadExit.markdownDescription%",
                    "default": false
                  },
                  "processExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.processExit.markdownDescription%",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "deprecationMessage": "%generateOptionsSchema.logging.engineLogging.deprecationMessage%",
                    "default": false
                  },
                  "diagnosticsLog": {
                    "description": "%generateOptionsSchema.logging.diagnosticsLog.description%",
                    "type": "object",
                    "required": [],
                    "default": {},
                    "properties": {
                      "protocolMessages": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription%",
                        "default": false
                      },
                      "dispatcherMessages": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "important",
                          "normal"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription%",
                        "default": "none"
                      },
                      "debugEngineAPITracing": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "all"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription%",
                        "default": "none"
                      },
                      "debugRuntimeEventTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription%",
                        "default": false
                      },
                      "expressionEvaluationTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription%",
                        "default": false
                      },
                      "startDebuggingTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription%",
                        "default": false
                      }
                    }
                  },
                  "consoleUsageMessage": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.logging.consoleUsageMessage.description%",
                    "default": true
                  }
                }
              },
              "pipeTransport": {
                "description": "%generateOptionsSchema.pipeTransport.description%",
                "type": "object",
                "required": [
                  "debuggerPath"
                ],
                "default": {
                  "pipeCwd": "${workspaceFolder}",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeCwd.description%",
                    "default": "${workspaceFolder}"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeProgram.description%",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.0.description%",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.1.description%",
                        "default": ""
                      }
                    ],
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.debuggerPath.description%",
                    "default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.pipeTransport.pipeEnv.description%",
                    "default": {}
                  },
                  "quoteArgs": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.pipeTransport.quoteArgs.description%",
                    "default": true
                  },
                  "windows": {
                    "description": "%generateOptionsSchema.pipeTransport.windows.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.windows.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "osx": {
                    "description": "%generateOptionsSchema.pipeTransport.osx.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.osx.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "linux": {
                    "description": "%generateOptionsSchema.pipeTransport.linux.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.linux.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  }
                }
              },
              "suppressJITOptimizations": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.suppressJITOptimizations.markdownDescription%",
                "default": false
              },
              "symbolOptions": {
                "description": "%generateOptionsSchema.symbolOptions.description%",
                "default": {
                  "searchPaths": [],
                  "searchMicrosoftSymbolServer": false,
                  "searchNuGetOrgSymbolServer": false
                },
                "type": "object",
                "properties": {
                  "searchPaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.symbolOptions.searchPaths.description%",
                    "default": []
                  },
                  "searchMicrosoftSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description%",
                    "default": false
                  },
                  "searchNuGetOrgSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description%",
                    "default": false
                  },
                  "cachePath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.symbolOptions.cachePath.description%",
                    "default": ""
                  },
                  "moduleFilter": {
                    "description": "%generateOptionsSchema.symbolOptions.moduleFilter.description%",
                    "default": {
                      "mode": "loadAllButExcluded",
                      "excludedModules": []
                    },
                    "type": "object",
                    "required": [
                      "mode"
                    ],
                    "properties": {
                      "mode": {
                        "type": "string",
                        "enum": [
                          "loadAllButExcluded",
                          "loadOnlyIncluded"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription%",
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription%"
                        ],
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.mode.description%",
                        "default": "loadAllButExcluded"
                      },
                      "excludedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description%",
                        "default": []
                      },
                      "includedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description%",
                        "default": []
                      },
                      "includeSymbolsNextToModules": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description%",
                        "default": true
                      },
                      "includeSymbolsOnDemand": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description%",
                        "default": true
                      }
                    }
                  }
                }
              },
              "sourceLinkOptions": {
                "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.markdownDescription%",
                "default": {
                  "*": {
                    "enabled": true
                  }
                },
                "type": "object",
                "additionalItems": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "title": "boolean",
                      "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription%",
                      "default": true
                    }
                  }
                }
              },
              "expressionEvaluationOptions": {
                "description": "%generateOptionsSchema.expressionEvaluationOptions.description%",
                "default": {},
                "type": "object",
                "properties": {
                  "allowImplicitFuncEval": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description%",
                    "default": true
                  },
                  "allowToString": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription%",
                    "default": true
                  },
                  "allowFastEvaluate": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description%",
                    "default": true
                  },
                  "showRawValues": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.showRawValues.description%",
                    "default": false
                  }
                }
              },
              "targetOutputLogPath": {
                "type": "string",
                "description": "%generateOptionsSchema.targetOutputLogPath.description%",
                "default": ""
              },
              "targetArchitecture": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.targetArchitecture.markdownDescription%",
                "enum": [
                  "x86_64",
                  "arm64"
                ]
              },
              "checkForDevCert": {
                "type": "boolean",
                "description": "%generateOptionsSchema.checkForDevCert.description%",
                "default": true
              }
            }
          },
          "attach": {
            "type": "object",
            "required": [],
            "properties": {
              "processName": {
                "type": "string",
                "default": "",
                "markdownDescription": "%generateOptionsSchema.processName.markdownDescription%"
              },
              "processId": {
                "anyOf": [
                  {
                    "type": "string",
                    "markdownDescription": "%generateOptionsSchema.processId.0.markdownDescription%",
                    "default": ""
                  },
                  {
                    "type": "integer",
                    "markdownDescription": "%generateOptionsSchema.processId.1.markdownDescription%",
                    "default": 0
                  }
                ]
              },
              "sourceFileMap": {
                "type": "object",
                "markdownDescription": "%generateOptionsSchema.sourceFileMap.markdownDescription%",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "justMyCode": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.justMyCode.markdownDescription%",
                "default": true
              },
              "requireExactSource": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.requireExactSource.markdownDescription%",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.enableStepFiltering.markdownDescription%",
                "default": true
              },
              "logging": {
                "description": "%generateOptionsSchema.logging.description%",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.exceptions.markdownDescription%",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.moduleLoad.markdownDescription%",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.programOutput.markdownDescription%",
                    "default": true
                  },
                  "browserStdOut": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.browserStdOut.markdownDescription%",
                    "default": true
                  },
                  "elapsedTiming": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.elapsedTiming.markdownDescription%",
                    "default": false
                  },
                  "threadExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.threadExit.markdownDescription%",
                    "default": false
                  },
                  "processExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.processExit.markdownDescription%",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "deprecationMessage": "%generateOptionsSchema.logging.engineLogging.deprecationMessage%",
                    "default": false
                  },
                  "diagnosticsLog": {
                    "description": "%generateOptionsSchema.logging.diagnosticsLog.description%",
                    "type": "object",
                    "required": [],
                    "default": {},
                    "properties": {
                      "protocolMessages": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription%",
                        "default": false
                      },
                      "dispatcherMessages": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "important",
                          "normal"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription%",
                        "default": "none"
                      },
                      "debugEngineAPITracing": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "all"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription%",
                        "default": "none"
                      },
                      "debugRuntimeEventTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription%",
                        "default": false
                      },
                      "expressionEvaluationTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription%",
                        "default": false
                      },
                      "startDebuggingTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription%",
                        "default": false
                      }
                    }
                  },
                  "consoleUsageMessage": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.logging.consoleUsageMessage.description%",
                    "default": true
                  }
                }
              },
              "pipeTransport": {
                "description": "%generateOptionsSchema.pipeTransport.description%",
                "type": "object",
                "required": [
                  "debuggerPath"
                ],
                "default": {
                  "pipeCwd": "${workspaceFolder}",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeCwd.description%",
                    "default": "${workspaceFolder}"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeProgram.description%",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.0.description%",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.1.description%",
                        "default": ""
                      }
                    ],
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.debuggerPath.description%",
                    "default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.pipeTransport.pipeEnv.description%",
                    "default": {}
                  },
                  "quoteArgs": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.pipeTransport.quoteArgs.description%",
                    "default": true
                  },
                  "windows": {
                    "description": "%generateOptionsSchema.pipeTransport.windows.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.windows.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "osx": {
                    "description": "%generateOptionsSchema.pipeTransport.osx.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.osx.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "linux": {
                    "description": "%generateOptionsSchema.pipeTransport.linux.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.linux.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  }
                }
              },
              "suppressJITOptimizations": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.suppressJITOptimizations.markdownDescription%",
                "default": false
              },
              "symbolOptions": {
                "description": "%generateOptionsSchema.symbolOptions.description%",
                "default": {
                  "searchPaths": [],
                  "searchMicrosoftSymbolServer": false,
                  "searchNuGetOrgSymbolServer": false
                },
                "type": "object",
                "properties": {
                  "searchPaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.symbolOptions.searchPaths.description%",
                    "default": []
                  },
                  "searchMicrosoftSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description%",
                    "default": false
                  },
                  "searchNuGetOrgSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description%",
                    "default": false
                  },
                  "cachePath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.symbolOptions.cachePath.description%",
                    "default": ""
                  },
                  "moduleFilter": {
                    "description": "%generateOptionsSchema.symbolOptions.moduleFilter.description%",
                    "default": {
                      "mode": "loadAllButExcluded",
                      "excludedModules": []
                    },
                    "type": "object",
                    "required": [
                      "mode"
                    ],
                    "properties": {
                      "mode": {
                        "type": "string",
                        "enum": [
                          "loadAllButExcluded",
                          "loadOnlyIncluded"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription%",
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription%"
                        ],
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.mode.description%",
                        "default": "loadAllButExcluded"
                      },
                      "excludedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description%",
                        "default": []
                      },
                      "includedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description%",
                        "default": []
                      },
                      "includeSymbolsNextToModules": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description%",
                        "default": true
                      },
                      "includeSymbolsOnDemand": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description%",
                        "default": true
                      }
                    }
                  }
                }
              },
              "sourceLinkOptions": {
                "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.markdownDescription%",
                "default": {
                  "*": {
                    "enabled": true
                  }
                },
                "type": "object",
                "additionalItems": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "title": "boolean",
                      "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription%",
                      "default": true
                    }
                  }
                }
              },
              "expressionEvaluationOptions": {
                "description": "%generateOptionsSchema.expressionEvaluationOptions.description%",
                "default": {},
                "type": "object",
                "properties": {
                  "allowImplicitFuncEval": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description%",
                    "default": true
                  },
                  "allowToString": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription%",
                    "default": true
                  },
                  "allowFastEvaluate": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description%",
                    "default": true
                  },
                  "showRawValues": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.showRawValues.description%",
                    "default": false
                  }
                }
              },
              "targetArchitecture": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.targetArchitecture.markdownDescription%",
                "enum": [
                  "x86_64",
                  "arm64"
                ]
              }
            }
          }
        },
        "configurationSnippets": [
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.console-local%",
            "description": "%debuggers.coreclr.configurationSnippets.description.console-local%",
            "body": {
              "name": ".NET Core Launch (console)",
              "type": "coreclr",
              "request": "launch",
              "preLaunchTask": "build",
              "program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
              "args": [],
              "cwd": "^\"\\${workspaceFolder}\"",
              "stopAtEntry": false,
              "console": "internalConsole"
            }
          },
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.attach-local%",
            "description": "%debuggers.coreclr.configurationSnippets.description.attach%",
            "body": {
              "name": ".NET Core Attach",
              "type": "coreclr",
              "request": "attach"
            }
          },
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.web-local%",
            "description": "%debuggers.coreclr.configurationSnippets.description.web-local%",
            "body": {
              "name": ".NET Core Launch (web)",
              "type": "coreclr",
              "request": "launch",
              "preLaunchTask": "build",
              "program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
              "args": [],
              "cwd": "^\"\\${workspaceFolder}\"",
              "stopAtEntry": false,
              "serverReadyAction": {
                "action": "openExternally",
                "pattern": "\\\\bNow listening on:\\\\s+(https?://\\\\S+)"
              },
              "env": {
                "ASPNETCORE_ENVIRONMENT": "Development"
              },
              "sourceFileMap": {
                "/Views": "^\"\\${workspaceFolder}/Views\""
              }
            }
          },
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.console-remote%",
            "description": "%debuggers.coreclr.configurationSnippets.description.remote%",
            "body": {
              "name": ".NET Core Launch (console)",
              "type": "coreclr",
              "request": "launch",
              "preLaunchTask": "build",
              "program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
              "args": [],
              "cwd": "^\"\\${workspaceFolder}\"",
              "stopAtEntry": false,
              "console": "internalConsole",
              "pipeTransport": {
                "pipeCwd": "^\"\\${workspaceFolder}\"",
                "pipeProgram": "^\"${3:enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'}\"",
                "pipeArgs": [],
                "debuggerPath": "^\"${4:enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg}\""
              }
            }
          },
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.attach-remote%",
            "description": "%debuggers.coreclr.configurationSnippets.description.remote%",
            "body": {
              "name": ".NET Core Attach",
              "type": "coreclr",
              "request": "attach",
              "pipeTransport": {
                "pipeCwd": "^\"\\${workspaceFolder}\"",
                "pipeProgram": "^\"${1:enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'}\"",
                "pipeArgs": [],
                "debuggerPath": "^\"${2:enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg}\""
              }
            }
          },
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.blazor-hosted%",
            "description": "%debuggers.coreclr.configurationSnippets.description.blazor-hosted%",
            "body": {
              "name": "Launch and Debug Hosted Blazor WebAssembly App",
              "type": "blazorwasm",
              "request": "launch",
              "hosted": true,
              "program": "^\"\\${workspaceFolder}/bin/Debug/${1:<target-framework>}/${2:<project-name.dll>}\"",
              "cwd": "^\"\\${workspaceFolder}\""
            }
          },
          {
            "label": "%debuggers.coreclr.configurationSnippets.label.blazor-standalone%",
            "description": "%debuggers.coreclr.configurationSnippets.description.blazor-standalone%",
            "body": {
              "name": "Launch and Debug Standalone Blazor WebAssembly App",
              "type": "blazorwasm",
              "request": "launch",
              "cwd": "^\"\\${workspaceFolder}\""
            }
          }
        ]
      },
      {
        "type": "clr",
        "when": "workspacePlatform == windows",
        "hiddenWhen": "true",
        "label": ".NET Framework 4.x",
        "languages": [
          "csharp",
          "razor",
          "qsharp",
          "aspnetcorerazor"
        ],
        "variables": {
          "pickProcess": "csharp.listProcess",
          "pickRemoteProcess": "csharp.listRemoteProcess",
          "pickRemoteDockerProcess": "csharp.listRemoteDockerProcess"
        },
        "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
        "configurationAttributes": {
          "launch": {
            "type": "object",
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.program.markdownDescription%",
                "default": "${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"
              },
              "cwd": {
                "type": "string",
                "description": "%generateOptionsSchema.cwd.description%",
                "default": "${workspaceFolder}"
              },
              "args": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "%generateOptionsSchema.args.0.description%",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  {
                    "type": "string",
                    "description": "%generateOptionsSchema.args.1.description%",
                    "default": ""
                  }
                ]
              },
              "stopAtEntry": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.stopAtEntry.markdownDescription%",
                "default": false
              },
              "launchBrowser": {
                "description": "%generateOptionsSchema.launchBrowser.description%",
                "default": {
                  "enabled": true
                },
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.launchBrowser.enabled.description%",
                    "default": true
                  },
                  "args": {
                    "type": "string",
                    "description": "%generateOptionsSchema.launchBrowser.args.description%",
                    "default": "${auto-detect-url}"
                  },
                  "osx": {
                    "description": "%generateOptionsSchema.launchBrowser.osx.description%",
                    "default": {
                      "command": "open",
                      "args": "${auto-detect-url}"
                    },
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.osx.command.description%",
                        "default": "open"
                      },
                      "args": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.osx.args.description%",
                        "default": "${auto-detect-url}"
                      }
                    }
                  },
                  "linux": {
                    "description": "%generateOptionsSchema.launchBrowser.linux.description%",
                    "default": {
                      "command": "xdg-open",
                      "args": "${auto-detect-url}"
                    },
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.linux.command.description%",
                        "default": "xdg-open"
                      },
                      "args": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.linux.args.description%",
                        "default": "${auto-detect-url}"
                      }
                    }
                  },
                  "windows": {
                    "description": "%generateOptionsSchema.launchBrowser.windows.description%",
                    "default": {
                      "command": "cmd.exe",
                      "args": "/C start ${auto-detect-url}"
                    },
                    "type": "object",
                    "required": [
                      "command"
                    ],
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.windows.command.description%",
                        "default": "cmd.exe"
                      },
                      "args": {
                        "type": "string",
                        "description": "%generateOptionsSchema.launchBrowser.windows.args.description%",
                        "default": "/C start ${auto-detect-url}"
                      }
                    }
                  }
                }
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "%generateOptionsSchema.env.description%",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.envFile.markdownDescription%",
                "default": "${workspaceFolder}/.env"
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "%generateOptionsSchema.console.internalConsole.enumDescription%",
                  "%generateOptionsSchema.console.integratedTerminal.enumDescription%",
                  "%generateOptionsSchema.console.externalTerminal.enumDescription%"
                ],
                "markdownDescription": "%generateOptionsSchema.console.markdownDescription%",
                "settingsDescription": "%generateOptionsSchema.console.settingsDescription%",
                "default": "internalConsole"
              },
              "externalConsole": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.externalConsole.markdownDescription%",
                "default": false
              },
              "launchSettingsFilePath": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.launchSettingsFilePath.markdownDescription%",
                "default": "${workspaceFolder}/Properties/launchSettings.json"
              },
              "launchSettingsProfile": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "%generateOptionsSchema.launchSettingsProfile.description%",
                "default": "<insert-profile-name>"
              },
              "sourceFileMap": {
                "type": "object",
                "markdownDescription": "%generateOptionsSchema.sourceFileMap.markdownDescription%",
                "additionalProperties": {
                  "type": "string"
                },
                "default": {}
              },
              "justMyCode": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.justMyCode.markdownDescription%",
                "default": true
              },
              "requireExactSource": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.requireExactSource.markdownDescription%",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.enableStepFiltering.markdownDescription%",
                "default": true
              },
              "logging": {
                "description": "%generateOptionsSchema.logging.description%",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.exceptions.markdownDescription%",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.moduleLoad.markdownDescription%",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.programOutput.markdownDescription%",
                    "default": true
                  },
                  "browserStdOut": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.browserStdOut.markdownDescription%",
                    "default": true
                  },
                  "elapsedTiming": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.elapsedTiming.markdownDescription%",
                    "default": false
                  },
                  "threadExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.threadExit.markdownDescription%",
                    "default": false
                  },
                  "processExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.processExit.markdownDescription%",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "deprecationMessage": "%generateOptionsSchema.logging.engineLogging.deprecationMessage%",
                    "default": false
                  },
                  "diagnosticsLog": {
                    "description": "%generateOptionsSchema.logging.diagnosticsLog.description%",
                    "type": "object",
                    "required": [],
                    "default": {},
                    "properties": {
                      "protocolMessages": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription%",
                        "default": false
                      },
                      "dispatcherMessages": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "important",
                          "normal"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription%",
                        "default": "none"
                      },
                      "debugEngineAPITracing": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "all"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription%",
                        "default": "none"
                      },
                      "debugRuntimeEventTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription%",
                        "default": false
                      },
                      "expressionEvaluationTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription%",
                        "default": false
                      },
                      "startDebuggingTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription%",
                        "default": false
                      }
                    }
                  },
                  "consoleUsageMessage": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.logging.consoleUsageMessage.description%",
                    "default": true
                  }
                }
              },
              "pipeTransport": {
                "description": "%generateOptionsSchema.pipeTransport.description%",
                "type": "object",
                "required": [
                  "debuggerPath"
                ],
                "default": {
                  "pipeCwd": "${workspaceFolder}",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeCwd.description%",
                    "default": "${workspaceFolder}"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeProgram.description%",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.0.description%",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.1.description%",
                        "default": ""
                      }
                    ],
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.debuggerPath.description%",
                    "default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.pipeTransport.pipeEnv.description%",
                    "default": {}
                  },
                  "quoteArgs": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.pipeTransport.quoteArgs.description%",
                    "default": true
                  },
                  "windows": {
                    "description": "%generateOptionsSchema.pipeTransport.windows.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.windows.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "osx": {
                    "description": "%generateOptionsSchema.pipeTransport.osx.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.osx.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "linux": {
                    "description": "%generateOptionsSchema.pipeTransport.linux.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.linux.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  }
                }
              },
              "suppressJITOptimizations": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.suppressJITOptimizations.markdownDescription%",
                "default": false
              },
              "symbolOptions": {
                "description": "%generateOptionsSchema.symbolOptions.description%",
                "default": {
                  "searchPaths": [],
                  "searchMicrosoftSymbolServer": false,
                  "searchNuGetOrgSymbolServer": false
                },
                "type": "object",
                "properties": {
                  "searchPaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.symbolOptions.searchPaths.description%",
                    "default": []
                  },
                  "searchMicrosoftSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description%",
                    "default": false
                  },
                  "searchNuGetOrgSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description%",
                    "default": false
                  },
                  "cachePath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.symbolOptions.cachePath.description%",
                    "default": ""
                  },
                  "moduleFilter": {
                    "description": "%generateOptionsSchema.symbolOptions.moduleFilter.description%",
                    "default": {
                      "mode": "loadAllButExcluded",
                      "excludedModules": []
                    },
                    "type": "object",
                    "required": [
                      "mode"
                    ],
                    "properties": {
                      "mode": {
                        "type": "string",
                        "enum": [
                          "loadAllButExcluded",
                          "loadOnlyIncluded"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription%",
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription%"
                        ],
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.mode.description%",
                        "default": "loadAllButExcluded"
                      },
                      "excludedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description%",
                        "default": []
                      },
                      "includedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description%",
                        "default": []
                      },
                      "includeSymbolsNextToModules": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description%",
                        "default": true
                      },
                      "includeSymbolsOnDemand": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description%",
                        "default": true
                      }
                    }
                  }
                }
              },
              "sourceLinkOptions": {
                "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.markdownDescription%",
                "default": {
                  "*": {
                    "enabled": true
                  }
                },
                "type": "object",
                "additionalItems": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "title": "boolean",
                      "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription%",
                      "default": true
                    }
                  }
                }
              },
              "expressionEvaluationOptions": {
                "description": "%generateOptionsSchema.expressionEvaluationOptions.description%",
                "default": {},
                "type": "object",
                "properties": {
                  "allowImplicitFuncEval": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description%",
                    "default": true
                  },
                  "allowToString": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription%",
                    "default": true
                  },
                  "allowFastEvaluate": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description%",
                    "default": true
                  },
                  "showRawValues": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.showRawValues.description%",
                    "default": false
                  }
                }
              },
              "targetOutputLogPath": {
                "type": "string",
                "description": "%generateOptionsSchema.targetOutputLogPath.description%",
                "default": ""
              },
              "targetArchitecture": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.targetArchitecture.markdownDescription%",
                "enum": [
                  "x86_64",
                  "arm64"
                ]
              },
              "checkForDevCert": {
                "type": "boolean",
                "description": "%generateOptionsSchema.checkForDevCert.description%",
                "default": true
              }
            }
          },
          "attach": {
            "type": "object",
            "required": [],
            "properties": {
              "processName": {
                "type": "string",
                "default": "",
                "markdownDescription": "%generateOptionsSchema.processName.markdownDescription%"
              },
              "processId": {
                "anyOf": [
                  {
                    "type": "string",
                    "markdownDescription": "%generateOptionsSchema.processId.0.markdownDescription%",
                    "default": ""
                  },
                  {
                    "type": "integer",
                    "markdownDescription": "%generateOptionsSchema.processId.1.markdownDescription%",
                    "default": 0
                  }
                ]
              },
              "sourceFileMap": {
                "type": "object",
                "markdownDescription": "%generateOptionsSchema.sourceFileMap.markdownDescription%",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "justMyCode": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.justMyCode.markdownDescription%",
                "default": true
              },
              "requireExactSource": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.requireExactSource.markdownDescription%",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.enableStepFiltering.markdownDescription%",
                "default": true
              },
              "logging": {
                "description": "%generateOptionsSchema.logging.description%",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.exceptions.markdownDescription%",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.moduleLoad.markdownDescription%",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.programOutput.markdownDescription%",
                    "default": true
                  },
                  "browserStdOut": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.browserStdOut.markdownDescription%",
                    "default": true
                  },
                  "elapsedTiming": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.elapsedTiming.markdownDescription%",
                    "default": false
                  },
                  "threadExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.threadExit.markdownDescription%",
                    "default": false
                  },
                  "processExit": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.logging.processExit.markdownDescription%",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "deprecationMessage": "%generateOptionsSchema.logging.engineLogging.deprecationMessage%",
                    "default": false
                  },
                  "diagnosticsLog": {
                    "description": "%generateOptionsSchema.logging.diagnosticsLog.description%",
                    "type": "object",
                    "required": [],
                    "default": {},
                    "properties": {
                      "protocolMessages": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription%",
                        "default": false
                      },
                      "dispatcherMessages": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "important",
                          "normal"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription%",
                        "default": "none"
                      },
                      "debugEngineAPITracing": {
                        "type": "string",
                        "enum": [
                          "none",
                          "error",
                          "all"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription%",
                          "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription%"
                        ],
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription%",
                        "default": "none"
                      },
                      "debugRuntimeEventTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription%",
                        "default": false
                      },
                      "expressionEvaluationTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription%",
                        "default": false
                      },
                      "startDebuggingTracing": {
                        "type": "boolean",
                        "markdownDescription": "%generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription%",
                        "default": false
                      }
                    }
                  },
                  "consoleUsageMessage": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.logging.consoleUsageMessage.description%",
                    "default": true
                  }
                }
              },
              "pipeTransport": {
                "description": "%generateOptionsSchema.pipeTransport.description%",
                "type": "object",
                "required": [
                  "debuggerPath"
                ],
                "default": {
                  "pipeCwd": "${workspaceFolder}",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeCwd.description%",
                    "default": "${workspaceFolder}"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.pipeProgram.description%",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.0.description%",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.pipeArgs.1.description%",
                        "default": ""
                      }
                    ],
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.pipeTransport.debuggerPath.description%",
                    "default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.pipeTransport.pipeEnv.description%",
                    "default": {}
                  },
                  "quoteArgs": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.pipeTransport.quoteArgs.description%",
                    "default": true
                  },
                  "windows": {
                    "description": "%generateOptionsSchema.pipeTransport.windows.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.windows.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.windows.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "osx": {
                    "description": "%generateOptionsSchema.pipeTransport.osx.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.osx.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.osx.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  },
                  "linux": {
                    "description": "%generateOptionsSchema.pipeTransport.linux.description%",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeCwd.description%",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeProgram.description%",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description%",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "%generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description%",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.pipeTransport.linux.quoteArgs.description%",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.pipeTransport.linux.pipeEnv.description%",
                        "default": {}
                      }
                    }
                  }
                }
              },
              "suppressJITOptimizations": {
                "type": "boolean",
                "markdownDescription": "%generateOptionsSchema.suppressJITOptimizations.markdownDescription%",
                "default": false
              },
              "symbolOptions": {
                "description": "%generateOptionsSchema.symbolOptions.description%",
                "default": {
                  "searchPaths": [],
                  "searchMicrosoftSymbolServer": false,
                  "searchNuGetOrgSymbolServer": false
                },
                "type": "object",
                "properties": {
                  "searchPaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "%generateOptionsSchema.symbolOptions.searchPaths.description%",
                    "default": []
                  },
                  "searchMicrosoftSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description%",
                    "default": false
                  },
                  "searchNuGetOrgSymbolServer": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description%",
                    "default": false
                  },
                  "cachePath": {
                    "type": "string",
                    "description": "%generateOptionsSchema.symbolOptions.cachePath.description%",
                    "default": ""
                  },
                  "moduleFilter": {
                    "description": "%generateOptionsSchema.symbolOptions.moduleFilter.description%",
                    "default": {
                      "mode": "loadAllButExcluded",
                      "excludedModules": []
                    },
                    "type": "object",
                    "required": [
                      "mode"
                    ],
                    "properties": {
                      "mode": {
                        "type": "string",
                        "enum": [
                          "loadAllButExcluded",
                          "loadOnlyIncluded"
                        ],
                        "enumDescriptions": [
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription%",
                          "%generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription%"
                        ],
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.mode.description%",
                        "default": "loadAllButExcluded"
                      },
                      "excludedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description%",
                        "default": []
                      },
                      "includedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description%",
                        "default": []
                      },
                      "includeSymbolsNextToModules": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description%",
                        "default": true
                      },
                      "includeSymbolsOnDemand": {
                        "type": "boolean",
                        "description": "%generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description%",
                        "default": true
                      }
                    }
                  }
                }
              },
              "sourceLinkOptions": {
                "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.markdownDescription%",
                "default": {
                  "*": {
                    "enabled": true
                  }
                },
                "type": "object",
                "additionalItems": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "title": "boolean",
                      "markdownDescription": "%generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription%",
                      "default": true
                    }
                  }
                }
              },
              "expressionEvaluationOptions": {
                "description": "%generateOptionsSchema.expressionEvaluationOptions.description%",
                "default": {},
                "type": "object",
                "properties": {
                  "allowImplicitFuncEval": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description%",
                    "default": true
                  },
                  "allowToString": {
                    "type": "boolean",
                    "markdownDescription": "%generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription%",
                    "default": true
                  },
                  "allowFastEvaluate": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description%",
                    "default": true
                  },
                  "showRawValues": {
                    "type": "boolean",
                    "description": "%generateOptionsSchema.expressionEvaluationOptions.showRawValues.description%",
                    "default": false
                  }
                }
              },
              "targetArchitecture": {
                "type": "string",
                "markdownDescription": "%generateOptionsSchema.targetArchitecture.markdownDescription%",
                "enum": [
                  "x86_64",
                  "arm64"
                ]
              }
            }
          }
        }
      },
      {
        "type": "blazorwasm",
        "label": "Blazor WebAssembly Debug",
        "hiddenWhen": "dotnet.debug.serviceBrokerAvailable",
        "initialConfigurations": [
          {
            "type": "blazorwasm",
            "name": "Launch and Debug Blazor WebAssembly Application",
            "request": "launch"
          }
        ],
        "configurationAttributes": {
          "launch": {
            "properties": {
              "cwd": {
                "type": "string",
                "description": "The directory of the Blazor WebAssembly app, defaults to the workspace folder.",
                "default": "${workspaceFolder}"
              },
              "url": {
                "type": "string",
                "description": "The URL of the application",
                "default": "https://localhost:5001"
              },
              "browser": {
                "type": "string",
                "description": "The debugging browser to launch (Edge or Chrome)",
                "default": "edge",
                "enum": [
                  "chrome",
                  "edge"
                ]
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "default": "true",
                "enum": [
                  "verbose",
                  true
                ],
                "description": "If true, verbose logs from JS debugger are sent to log file. If 'verbose', send logs to console."
              },
              "hosted": {
                "type": "boolean",
                "default": "false",
                "description": "True if the app is a hosted Blazor WebAssembly app, false otherwise."
              },
              "webRoot": {
                "type": "string",
                "default": "${workspaceFolder}",
                "description": "Specifies the absolute path to the webserver root."
              },
              "timeout": {
                "type": "number",
                "default": 30000,
                "description": "Retry for this number of milliseconds to connect to browser."
              },
              "program": {
                "type": "string",
                "default": "${workspaceFolder}/Server/bin/Debug/<target-framework>/<target-dll>",
                "description": "The path of the DLL to execute when launching a hosted server app"
              },
              "env": {
                "type": "object",
                "description": "Environment variables passed to dotnet. Only valid for hosted apps."
              },
              "dotNetConfig": {
                "description": "Options passed to the underlying .NET debugger. For more info, see https://github.com/dotnet/vscode-csharp/blob/main/debugger.md.",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "justMyCode": {
                    "type": "boolean",
                    "description": "Optional flag to only show user code.",
                    "default": true
                  },
                  "logging": {
                    "description": "Optional flags to determine what types of messages should be logged to the output window. Applicable only for the app server of hosted Blazor WASM apps.",
                    "type": "object",
                    "required": [],
                    "default": {},
                    "properties": {
                      "exceptions": {
                        "type": "boolean",
                        "description": "Optional flag to determine whether exception messages should be logged to the output window.",
                        "default": true
                      },
                      "moduleLoad": {
                        "type": "boolean",
                        "description": "Optional flag to determine whether module load events should be logged to the output window.",
                        "default": true
                      },
                      "programOutput": {
                        "type": "boolean",
                        "description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
                        "default": true
                      },
                      "engineLogging": {
                        "type": "boolean",
                        "description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
                        "default": false
                      },
                      "browserStdOut": {
                        "type": "boolean",
                        "description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
                        "default": true
                      },
                      "elapsedTiming": {
                        "type": "boolean",
                        "description": "If true, engine logging will include `adapterElapsedTime` and `engineElapsedTime` properties to indicate the amount of time, in microseconds, that a request took.",
                        "default": false
                      },
                      "threadExit": {
                        "type": "boolean",
                        "description": "Controls if a message is logged when a thread in the target process exits. Default: `false`.",
                        "default": false
                      },
                      "processExit": {
                        "type": "boolean",
                        "description": "Controls if a message is logged when the target process exits, or debugging is stopped. Default: `true`.",
                        "default": true
                      }
                    }
                  },
                  "sourceFileMap": {
                    "type": "object",
                    "description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "default": {
                      "<insert-source-path-here>": "<insert-target-path-here>"
                    }
                  }
                }
              },
              "browserConfig": {
                "description": "Options based to the underlying JavaScript debugger. For more info, see https://github.com/microsoft/vscode-js-debug/blob/master/OPTIONS.md.",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "outputCapture": {
                    "enum": [
                      "console",
                      "std"
                    ],
                    "description": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "default": "console"
                  }
                }
              }
            }
          },
          "attach": {
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL of the application",
                "default": "https://localhost:5001"
              },
              "cwd": {
                "type": "string",
                "description": "The directory of the Blazor WebAssembly app, defaults to the workspace folder.",
                "default": "${workspaceFolder}"
              },
              "browser": {
                "type": "string",
                "description": "The debugging browser to launch (Edge or Chrome)",
                "default": "chrome",
                "enum": [
                  "chrome",
                  "edge"
                ]
              },
              "trace": {
                "type": [
                  "boolean",
                  "string"
                ],
                "default": "true",
                "enum": [
                  "verbose",
                  true
                ],
                "description": "If true, verbose logs from JS debugger are sent to log file. If 'verbose', send logs to console."
              },
              "webRoot": {
                "type": "string",
                "default": "${workspaceFolder}",
                "description": "Specifies the absolute path to the webserver root."
              },
              "timeout": {
                "type": "number",
                "default": 30000,
                "description": "Retry for this number of milliseconds to connect to browser."
              }
            }
          }
        }
      },
      {
        "type": "dotnet",
        "label": "C#",
        "hiddenWhen": "!dotnet.debug.serviceBrokerAvailable",
        "languages": [
          "csharp",
          "razor",
          "aspnetcorerazor"
        ],
        "variables": {},
        "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",
        "configurationAttributes": {
          "launch": {
            "type": "object",
            "required": [
              "projectPath"
            ],
            "properties": {
              "projectPath": {
                "type": "string",
                "description": "%debuggers.dotnet.launch.projectPath.description%",
                "default": "${workspaceFolder}/<insert-project-name-here>.csproj"
              },
              "launchConfigurationId": {
                "type": "string",
                "description": "%debuggers.dotnet.launch.launchConfigurationId.description%"
              }
            }
          }
        },
        "configurationSnippets": [
          {
            "label": "%debuggers.dotnet.configurationSnippets.label%",
            "description": "%debuggers.dotnet.configurationSnippets.description%",
            "body": {
              "name": "C#: ${1:<project-name>} Debug",
              "type": "dotnet",
              "request": "launch",
              "projectPath": "^\"\\${workspaceFolder}/${2:<relative-path-to-project-folder>}${1:<project-name>}.csproj\""
            }
          }
        ]
      },
      {
        "type": "monovsdbg",
        "label": ".NET Core using Mono Runtime",
        "hiddenWhen": "true",
        "languages": [
          "csharp"
        ],
        "aiKey": "0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255"
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "razorComponentElement",
        "description": "A Razor component element"
      },
      {
        "id": "razorComponentAttribute",
        "description": "A Razor component attribute"
      },
      {
        "id": "razorTagHelperElement",
        "description": "A Razor TagHelper Element"
      },
      {
        "id": "razorTagHelperAttribute",
        "description": "A Razor TagHelper Attribute"
      },
      {
        "id": "razorTransition",
        "description": "A Razor transition"
      },
      {
        "id": "razorDirectiveAttribute",
        "description": "A Razor Directive Attribute"
      },
      {
        "id": "razorDirectiveColon",
        "description": "A colon between directive attribute parameters"
      },
      {
        "id": "razorDirective",
        "description": "A Razor directive such as 'code' or 'function'"
      },
      {
        "id": "razorComment",
        "description": "A Razor comment"
      },
      {
        "id": "markupCommentPunctuation",
        "description": "The '@' or '*' of a Razor comment."
      },
      {
        "id": "markupTagDelimiter",
        "description": "Markup delimiters like '<', '>', and '/'."
      },
      {
        "id": "markupOperator",
        "description": "Delimiter for Markup Attribute Key-Value pairs."
      },
      {
        "id": "markupElement",
        "description": "The name of a Markup element."
      },
      {
        "id": "markupAttribute",
        "description": "The name of a Markup attribute."
      },
      {
        "id": "markupAttributeQuote",
        "description": "A token that represents an attribute quote in a Markup attribute."
      },
      {
        "id": "markupAttributeValue",
        "description": "The value of a Markup attribute."
      },
      {
        "id": "markupComment",
        "description": "The contents of a Markup comment."
      },
      {
        "id": "markupCommentPunctuation",
        "description": "The begining or ending punctuation of a Markup comment."
      },
      {
        "id": "excludedCode",
        "description": "A token that represents inactive code."
      },
      {
        "id": "controlKeyword",
        "description": "A token that represents a control-flow keyword.",
        "superType": "keyword"
      },
      {
        "id": "operatorOverloaded",
        "description": "A declaration or reference to an overloaded operator."
      },
      {
        "id": "whitespace",
        "description": "A token that represents whitespace."
      },
      {
        "id": "text",
        "description": "A token that represents text."
      },
      {
        "id": "preprocessorText",
        "description": "Text associated with a preprocessor directive."
      },
      {
        "id": "punctuation",
        "description": "A token that represents punctuation."
      },
      {
        "id": "stringVerbatim",
        "superType": "string",
        "description": "A token that represents a verbatim string."
      },
      {
        "id": "stringEscapeCharacter",
        "superType": "string",
        "description": "An escape character within a string."
      },
      {
        "id": "recordClass",
        "superType": "class",
        "description": "A definition or reference to a record class type."
      },
      {
        "id": "delegate",
        "superType": "method",
        "description": "A definition or reference to a delegate type."
      },
      {
        "id": "module",
        "superType": "namespace",
        "description": "A definition or reference to a module name."
      },
      {
        "id": "recordStruct",
        "superType": "struct",
        "description": "A definition or reference to a record struct type."
      },
      {
        "id": "field",
        "superType": "property",
        "description": "A definition or reference to a field."
      },
      {
        "id": "constant",
        "superType": "variable",
        "description": "A definition or reference to a constant."
      },
      {
        "id": "extensionMethod",
        "superType": "method",
        "description": "A definition or reference to an extension method"
      },
      {
        "id": "xmlDocCommentAttributeName",
        "description": "A token that represents an attribute in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentAttributeQuotes",
        "description": "A token that represents an attribute quote in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentAttributeValue",
        "description": "A token that represents an attribute value in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentCDataSection",
        "description": "A token that represents a CDATA section in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentComment",
        "description": "A token that represents a comment in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentDelimiter",
        "description": "A token that represents a delimeter in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentEntityReference",
        "description": "A token that represents reference to an entity in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentName",
        "description": "A token that represents a name in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentProcessingInstruction",
        "description": "A token that represents a processing instruction in an XML documentation comment"
      },
      {
        "id": "xmlDocCommentText",
        "description": "A token that represents text in an XML documentation comment"
      },
      {
        "id": "xmlLiteralAttributeName",
        "description": "A token that represents an attribute name in an XML literal"
      },
      {
        "id": "xmlLiteralAttributeQuotes",
        "description": "A token that represents an attribute quote in an XML literal"
      },
      {
        "id": "xmlLiteralAttributeValue",
        "description": "A token that represents an attribute value in an XML literal"
      },
      {
        "id": "xmlLiteralCDataSection",
        "description": "A token that represents a CDATA section in an XML literal"
      },
      {
        "id": "xmlLiteralComment",
        "description": "A token that represents a comment in an XML literal"
      },
      {
        "id": "xmlLiteralDelimiter",
        "description": "A token that represents a delimiter in an XML literal"
      },
      {
        "id": "xmlLiteralEmbeddedExpression",
        "description": "A token that represents an emebedded expression in an XML literal"
      },
      {
        "id": "xmlLiteralEntityReference",
        "description": "A token that represents a reference to an entity in an XML literal"
      },
      {
        "id": "xmlLiteralName",
        "description": "A token that represents a name in an XML literal"
      },
      {
        "id": "xmlLiteralProcessingInstruction",
        "description": "A token that represents a processing instruction in an XML literal"
      },
      {
        "id": "xmlLiteralText",
        "description": "A token that represents text in an XML literal"
      },
      {
        "id": "regexComment",
        "description": "A token that represents a comment in a regex string"
      },
      {
        "id": "regexCharacterClass",
        "description": "A token that represents a character class in a regex string"
      },
      {
        "id": "regexAnchor",
        "description": "A token that represents an anchor in a regex string"
      },
      {
        "id": "regexQuantifier",
        "description": "A token that represents a quantifier in a regex string"
      },
      {
        "id": "regexGrouping",
        "description": "A token that represents a group in a regex string"
      },
      {
        "id": "regexAlternation",
        "description": "A token that represents an alternation in a regex string"
      },
      {
        "id": "regexText",
        "description": "A token that represents text in a regex string"
      },
      {
        "id": "regexSelfEscapedCharacter",
        "description": "A token that represents a self escaped character in a regex string"
      },
      {
        "id": "regexOtherEscape",
        "description": "A token that represents an escape in a regex string"
      },
      {
        "id": "jsonComment",
        "description": "A token that represents a comment in a JSON string"
      },
      {
        "id": "jsonNumber",
        "description": "A token that represents a number in a JSON string"
      },
      {
        "id": "jsonString",
        "description": "A token that represents a string in a JSON string"
      },
      {
        "id": "jsonKeyword",
        "description": "A token that represents a keyword in a JSON string"
      },
      {
        "id": "jsonText",
        "description": "A token that represents text in a JSON string"
      },
      {
        "id": "jsonOperator",
        "description": "A token that represents an operator in a JSON string"
      },
      {
        "id": "jsonPunctuation",
        "description": "A token that represents punctuation in a JSON string"
      },
      {
        "id": "jsonArray",
        "description": "A token that represents an array in a JSON string"
      },
      {
        "id": "jsonObject",
        "description": "A token that represents an object in a JSON string"
      },
      {
        "id": "jsonPropertyName",
        "description": "A token that represents a property name in a JSON string"
      },
      {
        "id": "jsonConstructorName",
        "description": "A token that represents a constructor in a JSON string"
      }
    ],
    "semanticTokenModifiers": [],
    "semanticTokenScopes": [
      {
        "language": "aspnetcorerazor",
        "scopes": {
          "razorComponentElement": [
            "entity.name.class.element.component"
          ],
          "razorComponentAttribute": [
            "entity.name.class.attribute.component"
          ],
          "razorTagHelperElement": [
            "entity.name.class.element.taghelper"
          ],
          "razorTagHelperAttribute": [
            "entity.name.class.attribute.taghelper"
          ],
          "razorTransition": [
            "keyword.control.razor.transition"
          ],
          "razorDirectiveAttribute": [
            "keyword.control.razor.directive.attribute",
            "keyword.control.cshtml.directive.attribute"
          ],
          "razorDirectiveColon": [
            "keyword.control.razor.directive.colon",
            "keyword.control.cshtml.directive.colon"
          ],
          "razorDirective": [
            "keyword.control.razor.directive",
            "keyword.control.cshtml.directive"
          ],
          "razorComment": [
            "comment.block.razor"
          ],
          "razorCommentTransition": [
            "meta.comment.razor",
            "keyword.control.cshtml.transition"
          ],
          "razorCommentStar": [
            "keyword.control.razor.comment.star",
            "meta.comment.razor"
          ],
          "angleBracket": [
            "punctuation.definition.tag"
          ],
          "forwardSlash": [
            "punctuation.definition.tag"
          ],
          "equals": [
            "punctuation.separator.key-value.html"
          ],
          "markupElement": [
            "entity.name.tag.html"
          ],
          "markupAttribute": [
            "entity.other.attribute-name.html"
          ],
          "markupAttributeQuote": [
            "punctuation.definition.tag.html"
          ],
          "markupAttributeValue": [
            "punctuation.definition.entity.html"
          ],
          "markupComment": [
            "comment.block.html"
          ],
          "markupCommentPunctuation": [
            "punctuation.definition.comment.html",
            "comment.block.html"
          ],
          "markupTagDelimiter": [
            "punctuation.definition.tag.html"
          ],
          "keyword": [
            "keyword.cs"
          ],
          "excludedCode": [
            "support.other.excluded.cs"
          ],
          "controlKeyword": [
            "keyword.control.cs"
          ],
          "operatorOverloaded": [
            "entity.name.function.member.overload.cs"
          ],
          "preprocessorText": [
            "meta.preprocessor.string.cs"
          ],
          "punctuation": [
            "punctuation.cs"
          ],
          "stringVerbatim": [
            "string.verbatim.cs"
          ],
          "stringEscapeCharacter": [
            "constant.character.escape.cs"
          ],
          "delegate": [
            "entity.name.type.delegate.cs"
          ],
          "module": [
            "entity.name.type.module.cs"
          ],
          "field": [
            "entity.name.variable.field.cs"
          ],
          "constant": [
            "variable.other.constant"
          ],
          "extensionMethod": [
            "entity.name.function.extension.cs"
          ],
          "xmlDocCommentAttributeName": [
            "comment.documentation.attribute.name.cs"
          ],
          "xmlDocCommentAttributeQuotes": [
            "comment.documentation.attribute.quotes.cs"
          ],
          "xmlDocCommentAttributeValue": [
            "comment.documentation.attribute.value.cs"
          ],
          "xmlDocCommentCDataSection": [
            "comment.documentation.cdata.cs"
          ],
          "xmlDocCommentComment": [
            "comment.documentation.comment.cs"
          ],
          "xmlDocCommentDelimiter": [
            "comment.documentation.delimiter.cs"
          ],
          "xmlDocCommentEntityReference": [
            "comment.documentation.entityReference.cs"
          ],
          "xmlDocCommentName": [
            "comment.documentation.name.cs"
          ],
          "xmlDocCommentProcessingInstruction": [
            "comment.documentation.processingInstruction.cs"
          ],
          "xmlDocCommentText": [
            "comment.documentation.cs"
          ],
          "xmlLiteralAttributeName": [
            "entity.other.attribute-name.localname.xml"
          ],
          "xmlLiteralAttributeQuotes": [
            "string.quoted.double.xml"
          ],
          "xmlLiteralAttributeValue": [
            "meta.tag.xml"
          ],
          "xmlLiteralCDataSection": [
            "string.quoted.double.xml"
          ],
          "xmlLiteralComment": [
            "comment.block.xml"
          ],
          "xmlLiteralDelimiter": [
            "text.xml"
          ],
          "xmlLiteralEmbeddedExpression": [
            "meta.tag.xml"
          ],
          "xmlLiteralEntityReference": [
            "meta.tag.xml"
          ],
          "xmlLiteralName": [
            "entity.name.tag.localname.xml"
          ],
          "xmlLiteralProcessingInstruction": [
            "meta.tag.xml"
          ],
          "xmlLiteralText": [
            "text.xml"
          ],
          "regexComment": [
            "string.regexp.comment.cs"
          ],
          "regexCharacterClass": [
            "constant.character.character-class.regexp.cs"
          ],
          "regexAnchor": [
            "keyword.control.anchor.regexp.cs"
          ],
          "regexQuantifier": [
            "keyword.operator.quantifier.regexp.cs"
          ],
          "regexGrouping": [
            "punctuation.definition.group.regexp.cs"
          ],
          "regexAlternation": [
            "keyword.operator.or.regexp.cs"
          ],
          "regexText": [
            "string.regexp"
          ],
          "regexSelfEscapedCharacter": [
            "string.regexp.self-escaped-character.cs"
          ],
          "regexOtherEscape": [
            "string.regexp.other-escape.cs"
          ],
          "jsonComment": [
            "comment.line.double-slash.js"
          ],
          "jsonNumber": [
            "constant.numeric.json"
          ],
          "jsonString": [
            "string.quoted.double.json"
          ],
          "jsonKeyword": [
            "constant.language.json"
          ],
          "jsonText": [
            "string.quoted.double.json"
          ],
          "jsonOperator": [
            "string.quoted.double.json"
          ],
          "jsonPunctuation": [
            "punctuation.separator.dictionary.key-value.json"
          ],
          "jsonArray": [
            "punctuation.definition.array.begin.json"
          ],
          "jsonObject": [
            "punctuation.definition.dictionary.begin.json"
          ],
          "jsonPropertyName": [
            "support.type.property-name.json"
          ],
          "jsonConstructorName": [
            "support.type.property-name.json"
          ]
        }
      },
      {
        "language": "csharp",
        "scopes": {
          "typeParameter": [
            "entity.name.type.type-parameter"
          ],
          "keyword": [
            "keyword.cs"
          ],
          "excludedCode": [
            "support.other.excluded.cs"
          ],
          "controlKeyword": [
            "keyword.control.cs"
          ],
          "operatorOverloaded": [
            "entity.name.function.member.overload.cs"
          ],
          "preprocessorText": [
            "meta.preprocessor.string.cs"
          ],
          "punctuation": [
            "punctuation.cs"
          ],
          "stringVerbatim": [
            "string.verbatim.cs"
          ],
          "stringEscapeCharacter": [
            "constant.character.escape.cs"
          ],
          "delegate": [
            "entity.name.type.delegate.cs"
          ],
          "module": [
            "entity.name.type.module.cs"
          ],
          "field": [
            "entity.name.variable.field.cs"
          ],
          "constant": [
            "variable.other.constant"
          ],
          "extensionMethod": [
            "entity.name.function.extension.cs"
          ],
          "xmlDocCommentAttributeName": [
            "comment.documentation.attribute.name.cs"
          ],
          "xmlDocCommentAttributeQuotes": [
            "comment.documentation.attribute.quotes.cs"
          ],
          "xmlDocCommentAttributeValue": [
            "comment.documentation.attribute.value.cs"
          ],
          "xmlDocCommentCDataSection": [
            "comment.documentation.cdata.cs"
          ],
          "xmlDocCommentComment": [
            "comment.documentation.comment.cs"
          ],
          "xmlDocCommentDelimiter": [
            "comment.documentation.delimiter.cs"
          ],
          "xmlDocCommentEntityReference": [
            "comment.documentation.entityReference.cs"
          ],
          "xmlDocCommentName": [
            "comment.documentation.name.cs"
          ],
          "xmlDocCommentProcessingInstruction": [
            "comment.documentation.processingInstruction.cs"
          ],
          "xmlDocCommentText": [
            "comment.documentation.cs"
          ],
          "xmlLiteralAttributeName": [
            "entity.other.attribute-name.localname.xml"
          ],
          "xmlLiteralAttributeQuotes": [
            "string.quoted.double.xml"
          ],
          "xmlLiteralAttributeValue": [
            "meta.tag.xml"
          ],
          "xmlLiteralCDataSection": [
            "string.quoted.double.xml"
          ],
          "xmlLiteralComment": [
            "comment.block.xml"
          ],
          "xmlLiteralDelimiter": [
            "text.xml"
          ],
          "xmlLiteralEmbeddedExpression": [
            "meta.tag.xml"
          ],
          "xmlLiteralEntityReference": [
            "meta.tag.xml"
          ],
          "xmlLiteralName": [
            "entity.name.tag.localname.xml"
          ],
          "xmlLiteralProcessingInstruction": [
            "meta.tag.xml"
          ],
          "xmlLiteralText": [
            "text.xml"
          ],
          "regexComment": [
            "string.regexp.comment.cs"
          ],
          "regexCharacterClass": [
            "constant.character.character-class.regexp.cs"
          ],
          "regexAnchor": [
            "keyword.control.anchor.regexp.cs"
          ],
          "regexQuantifier": [
            "keyword.operator.quantifier.regexp.cs"
          ],
          "regexGrouping": [
            "punctuation.definition.group.regexp.cs"
          ],
          "regexAlternation": [
            "keyword.operator.or.regexp.cs"
          ],
          "regexText": [
            "string.regexp"
          ],
          "regexSelfEscapedCharacter": [
            "string.regexp.self-escaped-character.cs"
          ],
          "regexOtherEscape": [
            "string.regexp.other-escape.cs"
          ],
          "jsonComment": [
            "comment.line.double-slash.js"
          ],
          "jsonNumber": [
            "constant.numeric.json"
          ],
          "jsonString": [
            "string.quoted.double.json"
          ],
          "jsonKeyword": [
            "constant.language.json"
          ],
          "jsonText": [
            "string.quoted.double.json"
          ],
          "jsonOperator": [
            "string.quoted.double.json"
          ],
          "jsonPunctuation": [
            "punctuation.separator.dictionary.key-value.json"
          ],
          "jsonArray": [
            "punctuation.definition.array.begin.json"
          ],
          "jsonObject": [
            "punctuation.definition.dictionary.begin.json"
          ],
          "jsonPropertyName": [
            "support.type.property-name.json"
          ],
          "jsonConstructorName": [
            "support.type.property-name.json"
          ]
        }
      }
    ],
    "languages": [
      {
        "id": "aspnetcorerazor",
        "extensions": [
          ".cshtml",
          ".razor"
        ],
        "mimetypes": [
          "text/x-cshtml"
        ],
        "configuration": "./src/razor/language-configuration.json",
        "aliases": [
          "ASP.NET Razor"
        ]
      },
      {
        "id": "xaml",
        "extensions": [
          ".xaml"
        ],
        "configuration": "./src/xaml/language-configuration.json",
        "aliases": [
          "XAML"
        ]
      }
    ],
    "grammars": [
      {
        "language": "aspnetcorerazor",
        "scopeName": "text.aspnetcorerazor",
        "path": "./src/razor/syntaxes/aspnetcorerazor.tmLanguage.json",
        "unbalancedBracketScopes": [
          "text.aspnetcorerazor"
        ]
      },
      {
        "language": "xaml",
        "scopeName": "source.xaml",
        "path": "./src/xaml/syntaxes/xaml.tmLanguage.json"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "dotnet.test.runTestsInContext",
          "when": "editorLangId == csharp && dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
        },
        {
          "command": "dotnet.test.debugTestsInContext",
          "when": "editorLangId == csharp && dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp'"
        },
        {
          "command": "o.restart",
          "when": "dotnet.server.activationContext == 'OmniSharp'"
        },
        {
          "command": "csharp.listProcess",
          "when": "false"
        },
        {
          "command": "csharp.listRemoteProcess",
          "when": "false"
        },
        {
          "command": "csharp.listRemoteDockerProcess",
          "when": "false"
        }
      ],
      "editor/title": [
        {
          "command": "extension.showRazorCSharpWindow",
          "when": "resourceLangId == aspnetcorerazor"
        },
        {
          "command": "extension.showRazorHtmlWindow",
          "when": "resourceLangId == aspnetcorerazor"
        },
        {
          "command": "razor.reportIssue",
          "when": "resourceLangId == aspnetcorerazor"
        }
      ],
      "editor/context": [
        {
          "command": "dotnet.test.runTestsInContext",
          "when": "editorLangId == csharp && (dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp')",
          "group": "2_dotnet@1"
        },
        {
          "command": "dotnet.test.debugTestsInContext",
          "when": "editorLangId == csharp && (dotnet.server.activationContext == 'Roslyn' || dotnet.server.activationContext == 'OmniSharp')",
          "group": "2_dotnet@2"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "debug",
        "contents": "%viewsWelcome.debug.contents%",
        "when": "debugStartLanguage == csharp && !dotnet.debug.serviceBrokerAvailable"
      }
    ],
    "configurationDefaults": {
      "[xaml]": {
        "editor.wordBasedSuggestions": "off"
      },
      "[csharp]": {
        "editor.formatOnType": true
      }
    }
  }
}