{
  "command.csharp.attachToProcess": ".NET 5 以降または .NET Core プロセスにアタッチする",
  "command.csharp.downloadDebugger": ".NET Core デバッガーをダウンロードする",
  "command.csharp.listProcess": "アタッチのプロセスをリスト表示する",
  "command.csharp.listRemoteDockerProcess": "Docker 接続のプロセスをリスト表示する",
  "command.csharp.listRemoteProcess": "アタッチ用のリモート接続のプロセスをリスト表示する",
  "command.csharp.reportIssue": "問題の報告",
  "command.csharp.showDecompilationTerms": "逆コンパイラの使用契約条件を表示する",
  "command.dotnet.generateAssets.currentProject": "ビルド用およびデバッグ用の資産を生成する",
  "command.dotnet.openSolution": "ソリューションを開く",
  "command.dotnet.restartServer": "言語サーバーを再起動する",
  "command.dotnet.restore.all": "すべてのプロジェクトを復元する",
  "command.dotnet.restore.project": "プロジェクトの復元",
  "command.dotnet.test.debugTestsInContext": "コンテキストでテストをデバッグする",
  "command.dotnet.test.runTestsInContext": "コンテキストでテストを実行する",
  "command.extension.showRazorCSharpWindow": "Razor CSharp を表示する",
  "command.extension.showRazorHtmlWindow": "Razor Html を表示する",
  "command.o.fixAll.document": "ドキュメント内のコードの問題のすべての出現箇所を修正する",
  "command.o.fixAll.project": "プロジェクト内のコードの問題のすべての出現箇所を修正する",
  "command.o.fixAll.solution": "ソリューション内のコードの問題のすべての出現箇所を修正する",
  "command.o.pickProjectAndStart": "プロジェクトの選択",
  "command.o.reanalyze.allProjects": "すべてのプロジェクトを分析する",
  "command.o.reanalyze.currentProject": "現在のプロジェクトを分析する",
  "command.o.restart": "OmniSharp を再起動する",
  "command.razor.reportIssue": "Razor の問題を報告する",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": "暗黙的なオブジェクト作成のヒントを表示します",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": "推論された型の変数のヒントを表示する",
  "configuration.csharp.inlayHints.enableInlayHintsForIndexerParameters": "インデクサーのヒントを表示する",
  "configuration.csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": "ラムダ パラメーター型のヒントを表示する",
  "configuration.csharp.inlayHints.enableInlayHintsForTypes": "インライン型のヒントを表示する",
  "configuration.dotnet.autoInsert.enableAutoInsert": "ドキュメント コメントの自動挿入を有効にします。",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "次のバックグラウンド コード分析を実行します: (以前の `omnisharp.enableRoslynAnalyzers`)",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.fullSolution": "ソリューション全体",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.none": "なし",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.openFiles": "開かれているドキュメント",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope": "次のコンパイラ エラーと警告を表示する:",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.fullSolution": "ソリューション全体",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.none": "なし",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.openFiles": "開かれているドキュメント",
  "configuration.dotnet.codeLens.enableReferencesCodeLens": "参照 CodeLens を表示するかどうかを指定します。(以前は `csharp.referencesCodeLens.enabled`)",
  "configuration.dotnet.codeLens.enableTestsCodeLens": "CodeLens の実行テストとデバッグ テストを表示するかどうかを指定します。(以前の `csharp.testsCodeLens.enabled`)",
  "configuration.dotnet.completion.provideRegexCompletions": "入力候補一覧に正規表現を表示します。",
  "configuration.dotnet.completion.showCompletionItemsFromUnimportedNamespaces": "インポートされていない型とインポートされていない拡張メソッドを入力候補一覧に表示するためのサポートを有効にします。コミットすると、現在のファイルの先頭に適切な using ディレクティブが追加されます。(以前の `omnisharp.enableImportCompletion`)",
  "configuration.dotnet.completion.showNameCompletionSuggestions": "最近選択したメンバーの自動オブジェクト名の完了を実行します。",
  "configuration.dotnet.completion.triggerCompletionInArgumentLists": "引数リストに入力候補一覧を自動的に表示する",
  "configuration.dotnet.defaultSolution.description": "ワークスペースで開く既定のソリューションのパス。スキップするには 'disable' に設定します。(以前の `omnisharp.defaultLaunchSolution`)",
  "configuration.dotnet.enableXamlTools": "C# 開発キットを使用するときに XAML ツールを有効にします",
  "configuration.dotnet.formatting.organizeImportsOnFormat": "ドキュメントの書式設定中に 'using' ディレクティブをグループ化して並べ替える必要があるかどうかを指定します。(以前の 'omnisharp.organizeImportsOnFormat')",
  "configuration.dotnet.highlighting.highlightRelatedJsonComponents": "カーソルの下にある関連する JSON コンポーネントをハイライトします。",
  "configuration.dotnet.highlighting.highlightRelatedRegexComponents": "カーソルの下にある関連する正規表現コンポーネントをハイライトします。",
  "configuration.dotnet.inlayHints.enableInlayHintsForLiteralParameters": "リテラルのヒントを表示する",
  "configuration.dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": "'new' 式のヒントを表示する",
  "configuration.dotnet.inlayHints.enableInlayHintsForOtherParameters": "その他すべてのヒントを表示する",
  "configuration.dotnet.inlayHints.enableInlayHintsForParameters": "インライン パラメーター名のヒントを表示する",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": "パラメーター名のサフィックスのみが異なる場合にヒントを非表示にする",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": "引数がパラメーター名と一致するとき、ヒントを抑制する",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": "パラメーター名がメソッドの意図と一致する場合にヒントを非表示にする",
  "configuration.dotnet.navigation.navigateToDecompiledSources": "逆コンパイルされたソースへのナビゲーションを有効にします。",
  "configuration.dotnet.navigation.navigateToSourceLinkAndEmbeddedSources": "Source Link および埋め込みソースに移動できるようにします。",
  "configuration.dotnet.preferCSharpExtension": "C# 拡張機能のみを使用してプロジェクトを強制的に読み込みます。 これは、C# Dev Kit でサポートされていないレガシ プロジェクトの種類を使用する場合に役立ちます。(ウィンドウの再読み込みが必要)",
  "configuration.dotnet.projects.binaryLogPath": "読み込みエラーの診断に役立つ、プロジェクト読み込み時に MSBuild バイナリ ログが書き込まれるパスを設定します。",
  "configuration.dotnet.projects.enableAutomaticRestore": "拡張機能で資産が見つからないと検出された場合に、NuGet の自動復元を有効にします。",
  "configuration.dotnet.quickInfo.showRemarksInQuickInfo": "シンボルを表示するときに注釈情報を表示します。",
  "configuration.dotnet.server.componentPaths": "言語サーバーの組み込みコンポーネントのフォルダー パスをオーバーライドできます (たとえば、ローカルにビルドされたコンポーネントを使用するように拡張ディレクトリの .roslynDevKit パスをオーバーライドする)",
  "configuration.dotnet.server.componentPaths.roslynDevKit": "言語サーバーの .roslynDevKit コンポーネントのフォルダー パスをオーバーライドします",
  "configuration.dotnet.server.componentPaths.xamlTools": "言語サーバーの .xamlTools コンポーネントのフォルダー パスをオーバーライドします",
  "configuration.dotnet.server.crashDumpPath": "言語サーバーがクラッシュした場合にクラッシュ ダンプの書き込み先フォルダー パスを設定します。ユーザーによる書き込みが可能であることが必要です。",
  "configuration.dotnet.server.extensionPaths": "言語サーバーへのパスのオーバーライド --拡張引数",
  "configuration.dotnet.server.path": "サーバー (LSP または O#) 実行可能ファイルに絶対パスを指定します。空のままにすると、C# 拡張機能にピン留めされたバージョンが使用されます。(以前の `omnisharp.path`)",
  "configuration.dotnet.server.startTimeout": "クライアントが正常に起動して言語サーバーに接続するためのタイムアウト (ミリ秒) を指定します。",
  "configuration.dotnet.server.suppressLspErrorToasts": "サーバーで回復可能なエラーが発生した場合に、エラー トーストが表示されないようにします。",
  "configuration.dotnet.server.suppressMiscellaneousFilesToasts": "開いているワークスペースに属さないドキュメントがアクティブである場合に、警告トーストを表示しないようにします。",
  "configuration.dotnet.server.useServerGC": ".NET サーバーのガベージ コレクションを使用するように言語サーバーを構成します。サーバー GC は一般に、メモリ消費量が高いことをコストにパフォーマンスを向上させます。",
  "configuration.dotnet.server.waitForDebugger": "デバッガーのアタッチを許可するために、サーバーを起動するときに --debug フラグを渡します。(以前の `omnisharp.waitForDebugger`)",
  "configuration.dotnet.symbolSearch.searchReferenceAssemblies": "参照アセンブリ内のシンボルを検索します。影響を受ける機能には、インポートの追加などのシンボル検索が必要です。",
  "configuration.dotnet.typeMembers.memberInsertionLocation": "インターフェイスまたは抽象クラスを実装する場合の、プロパティ、イベント、メソッドの挿入場所です。",
  "configuration.dotnet.typeMembers.memberInsertionLocation.atTheEnd": "最後に配置します。",
  "configuration.dotnet.typeMembers.memberInsertionLocation.withOtherMembersOfTheSameKind": "同じ種類の他のメンバーと共に配置します。",
  "configuration.dotnet.typeMembers.propertyGenerationBehavior": "インターフェイスまたは抽象クラスを実装するときのプロパティの生成動作。",
  "configuration.dotnet.typeMembers.propertyGenerationBehavior.preferAutoProperties": "自動プロパティを優先します。",
  "configuration.dotnet.typeMembers.propertyGenerationBehavior.preferThrowingProperties": "スロー プロパティを優先します。",
  "configuration.dotnet.unitTestDebuggingOptions": "単体テスト デバッグの起動時にデバッガーで使用するオプション。(以前の `csharp.unitTestDebuggingOptions`)",
  "configuration.dotnet.unitTests.runSettingsPath": "単体テストの実行時に使用する必要がある .runsettings ファイルへのパス。(以前は `omnisharp.testRunSettings` でした)",
  "configuration.omnisharp.autoStart": "OmniSharp サーバーを自動的に起動するかどうかを指定します。false の場合、OmniSharp は 'Restart OmniSharp' コマンドで開始できます",
  "configuration.omnisharp.csharp.format.enable": "既定の C# フォーマッタを有効/無効にします (再起動が必要です)。",
  "configuration.omnisharp.csharp.maxProjectFileCountForDiagnosticAnalysis": "ワークスペース全体で診断が報告されるファイルの最大数を指定します。この制限を超えると、現在開いているファイルについてのみ診断が表示されます。制限を完全に無効にするには、0 以下を指定します。",
  "configuration.omnisharp.csharp.referencesCodeLens.filteredSymbols": "CodeLens を無効にする必要があるカスタム シンボル名の配列。",
  "configuration.omnisharp.csharp.semanticHighlighting.enabled": "C# ファイルのセマンティック強調表示を有効または無効にします (Razor ファイルは現在サポートされていません)。既定値は false です。開いているファイルを閉じて変更を有効にします。",
  "configuration.omnisharp.csharp.showOmnisharpLogOnError": "OmniSharp がエラーを報告すると、[出力] ウィンドウに OmniSharp ログが表示されます。",
  "configuration.omnisharp.csharp.suppressBuildAssetsNotification": "アプリケーションをビルドまたはデバッグするために不足しているアセットを追加するには、通知ウィンドウを非表示にします。",
  "configuration.omnisharp.csharp.suppressDotnetInstallWarning": ".NET Core SDKがパスにないことを示す警告を抑制します。",
  "configuration.omnisharp.csharp.suppressDotnetRestoreNotification": "依存関係を解決できない場合は、通知ウィンドウで 'dotnet restore' を実行しないようにします。",
  "configuration.omnisharp.csharp.suppressHiddenDiagnostics": "'非表示' 診断 ('不要な using ディレクティブ' など) がエディターまたは [問題] ウィンドウに表示されないようにします。",
  "configuration.omnisharp.csharp.suppressProjectJsonWarning": "project.json が .NET Core アプリケーションでサポートされなくなったプロジェクト形式であるという警告を抑制する",
  "configuration.omnisharp.disableMSBuildDiagnosticWarning": "OmniSharp でプロジェクトの読み込み中に警告またはエラーが発生した場合に通知を表示するかどうかを指定します。これらの警告/エラーは常に OmniSharp ログに出力されることに注意してください",
  "configuration.omnisharp.dotNetCliPaths": "ユーザー コードの実行に使用する .NET CLI のローカル ダウンロードへのパス。",
  "configuration.omnisharp.dotnet.server.useOmnisharp": "言語機能を有効にすると Omnisharp サーバーを使用するように切り替えます (再起動が必要です)。このオプションは、C# 開発キットがインストールされている場合は適用されません。",
  "configuration.omnisharp.dotnetPath": "既定のシステム ディレクトリの代わりに使用する dotnet インストール ディレクトリへのパスを指定します。これは、OmniSharp サーバー自体をホストするために使用する dotnet インストールにのみ影響します。例: \"/home/username/mycustomdotnetdirectory\"。",
  "configuration.omnisharp.enableAsyncCompletion": "(試験段階) 完了編集を非同期的に解決するためのサポートを有効にします。これにより、完了項目の挿入後にわずかな遅延が発生する代わりに、完了リストを表示する時間を短縮できます。特に、メソッドの完了リストをオーバーライドして部分的に指定できます。ほとんどの完了項目は、この機能に顕著な影響を与えるわけではありませんが、オーバーライドまたは部分的なメソッドの完了を挿入した直後に入力すると、挿入が完了する前に予測できない結果になる可能性があります。",
  "configuration.omnisharp.enableDecompilationSupport": "メタデータを表示する代わりに、外部参照の逆コンパイルのサポートを有効にします。",
  "configuration.omnisharp.enableEditorConfigSupport": ".editorconfig からコード スタイル、名前付け規則、アナライザー設定を読み取りのサポートを有効にします。",
  "configuration.omnisharp.enableLspDriver": "試験的言語プロトコル ベースのエンジンのサポートを有効にします (バインドを正しくセットアップするには再読み込みが必要です)",
  "configuration.omnisharp.enableMsBuildLoadProjectsOnDemand": "true の場合、MSBuild プロジェクト システムは、エディターで開かれたファイルのプロジェクトのみを読み込みます。この設定は、大規模な C# コードベースに役立ち、編集中のコードに関連するプロジェクトに対してのみ、コード ナビゲーション機能の初期化を高速化できます。この設定を有効にすると、OmniSharp で読み込まれるプロジェクトが少なくなり、シンボルの不完全な参照リストが表示される場合があります。",
  "configuration.omnisharp.loggingLevel": "OmniSharp サーバーからのログ出力のレベルを指定します。",
  "configuration.omnisharp.maxFindSymbolsItems": "[ワークスペース内のシンボルに移動] 操作で表示できる項目の最大数。この制限は、ここで正の数値が指定されている場合にのみ適用されます。",
  "configuration.omnisharp.maxProjectResults": "[プロジェクトの選択] ドロップダウンに表示されるプロジェクトの最大数 (最大 250)。",
  "configuration.omnisharp.minFindSymbolsFilterLength": "[ワークスペースのシンボルに移動] 操作の前に入力する最小文字数は、結果を表示します。",
  "configuration.omnisharp.monoPath": "\"useModernNet\" が既定のシステムインストールではなく false に設定されている場合に使用する Mono インストールへのパスを指定します。例: \"/Library/Frameworks/Mono.framework/Versions/Current\"",
  "configuration.omnisharp.projectFilesExcludePattern": "すべてのプロジェクト ファイルを検索するために OmniSharp で使用される除外パターン。",
  "configuration.omnisharp.projectLoadTimeout": "Visual Studio Code が OmniSharp サーバーの起動を待機する時間。時間は秒単位で表されます。",
  "configuration.omnisharp.razor.completion.commitElementsWithSpace": "タグ ヘルパーとコンポーネント要素をスペースでコミットするかどうかを指定します。",
  "configuration.omnisharp.razor.devmode": "ローカル Razor.VSCode 開発を有効にするモードで拡張機能を強制的に実行します。",
  "configuration.omnisharp.razor.format.codeBlockBraceOnNextLine": "@code または @functions ディレクティブの後の始め中かっこを強制的に次の行にします。",
  "configuration.omnisharp.razor.format.enable": "既定の Razor フォーマッタを有効または無効にします。",
  "configuration.omnisharp.razor.plugin.path": "Razor プラグイン dll へのパスをオーバーライドします。",
  "configuration.omnisharp.sdkIncludePrereleases": "プロジェクトの読み込みに使用するバージョンを決定するときに、.NET SDK のプレビュー バージョンを含めるかどうかを指定します。\"useModernNet\" が true に設定されている場合に適用されます。",
  "configuration.omnisharp.sdkPath": "インストールされている最も高いバージョンではなく、プロジェクトの読み込みに使用する .NET SDK インストールへのパスを指定します。\"useModernNet\" が true に設定されている場合に適用されます。例: /home/username/dotnet/sdks/6.0.300。",
  "configuration.omnisharp.sdkVersion": "インストールされている最も高いバージョンではなく、プロジェクトの読み込みに使用する .NET SDK のバージョンを指定します。\"useModernNet\" が true に設定されている場合に適用されます。例: 6.0.300。",
  "configuration.omnisharp.useEditorFormattingSettings": "OmniSharp で C# コードの書式設定 (タブ、インデント サイズの使用) に VS Code エディター設定を使用するかどうかを指定します。",
  "configuration.omnisharp.useModernNet.description": ".NET 6 用の OmniSharp ビルドを使用します。このバージョンは、Unity を含む SDK スタイルではない .NET Framework プロジェクトを _サポートしていません_。SDK スタイルの Framework、.NET Core、および .NET 5+ のプロジェクトでは、パフォーマンスが大幅に向上します。",
  "configuration.omnisharp.useModernNet.title": "OmniSharp の .NET 6 ビルドを使用する",
  "configuration.razor.languageServer.debug": "言語サーバーの起動時にデバッグ アタッチを待機するかどうかを指定します。",
  "configuration.razor.languageServer.directory": "Razor Language Server ディレクトリへのパスをオーバーライドします。",
  "configuration.razor.languageServer.forceRuntimeCodeGeneration": "(試験段階) Razor ファイルのデザイン時間/ランタイム コード生成の併用を有効にする",
  "configuration.razor.languageServer.suppressLspErrorToasts": "サーバーで回復可能なエラーが発生した場合に、エラー トーストが表示されないようにします。",
  "configuration.razor.languageServer.useNewFormattingEngine": "新しい Razor 書式設定エンジンを使用します。",
  "configuration.razor.server.trace": "Razor サーバーに使用するログ レベルを指定します。",
  "debuggers.coreclr.configurationSnippets.description.attach": "実行中のプロセスに .NET デバッガー (coreclr) をアタッチします。これは、'.NET 5 以降または .NET Core プロセスにアタッチする' コマンドを使用して行うこともできます。",
  "debuggers.coreclr.configurationSnippets.description.blazor-hosted": "このスニペットは、起動する実行可能ファイルへのパスを指定して、Blazor WebAssembly デバッガー (blazorwasm) で新しいプロセスを起動するために使用されます。ほとんどの場合、\".NET: Launch C# プロジェクト\" スニペットの方が適切ですが、このスニペットを使用すると、すべての起動オプションを完全に制御できます。このスニペットは、ホストされている Blazor プロジェクト用です。これは、ファイルを提供するバックエンド ASP.NET Core アプリを持つプロジェクトです。",
  "debuggers.coreclr.configurationSnippets.description.blazor-standalone": "このスニペットは、Blazor WebAssembly デバッガー (blazorwasm) で新しいプロセスを起動するために使用されます。ほとんどの場合、\".NET: Launch C# プロジェクト\" スニペットの方が適切ですが、このスニペットを使用すると、すべての起動オプションを完全に制御できます。このスニペットは、スタンドアロン Blazor プロジェクト用です。これは、ファイルを提供するバックエンド ASP.NET Core アプリを持たないプロジェクトです。",
  "debuggers.coreclr.configurationSnippets.description.console-local": "このスニペットは、.NET デバッガー (coreclr) の下で新しいプロセスを起動するために使用され、起動する実行可能ファイルへのパスを指定します。ほとんどの場合、\".NET: C# プロジェクトを起動する\" スニペットが最適です。このスニペットは、プロジェクトがこの VS Code インスタンスの外部でビルドされた場合、または .NET Code をカスタム実行可能ファイル (特定のバージョンの 'dotnet.exe'/'dotnet' など) でホストする場合、または .NET Code がネイティブ アプリケーションによってホストされている場合に役立ちます。このスニペットはコンソール アプリケーション用です。",
  "debuggers.coreclr.configurationSnippets.description.remote": "このスニペットは、VS Code リモートを使用して .NET Code **without** をリモートでデバッグする方法示します。プロジェクトをローカルでビルドし、別のコンピューターで実行する場合に使用する必要があります。",
  "debuggers.coreclr.configurationSnippets.description.web-local": "このスニペットは、.NET デバッガー (coreclr) の下で新しいプロセスを起動するために使用され、起動する実行可能ファイルへのパスを指定します。ほとんどの場合、\".NET: C# プロジェクトを起動する\" スニペットが最適です。このスニペットは、プロジェクトがこの VS Code インスタンスの外部でビルドされた場合、または .NET Code をカスタム実行可能ファイル (特定のバージョンの 'dotnet.exe'/'dotnet' など) でホストする場合、または .NET Code がネイティブ アプリケーションによってホストされている場合に役立ちます。このスニペットは Web (ASP.NET Core) アプリケーション用です。",
  "debuggers.coreclr.configurationSnippets.label.attach-local": ".NET: .NET プロセスにアタッチする",
  "debuggers.coreclr.configurationSnippets.label.attach-remote": ".NET: リモート デバッグ - .NET プロセスへのアタッチ",
  "debuggers.coreclr.configurationSnippets.label.blazor-hosted": ".NET: Web アセンブリ - ホストされている Blazor プロジェクトを起動します",
  "debuggers.coreclr.configurationSnippets.label.blazor-standalone": ".NET: Web アセンブリ - スタンドアロン Blazor プロジェクトを起動します",
  "debuggers.coreclr.configurationSnippets.label.console-local": ".NET: 実行可能ファイルの起動 (コンソール)",
  "debuggers.coreclr.configurationSnippets.label.console-remote": ".NET: リモート デバッグ - 実行可能ファイルの起動 (コンソール)",
  "debuggers.coreclr.configurationSnippets.label.web-local": ".NET: 実行可能ファイルの起動 (Web)",
  "debuggers.dotnet.configurationSnippets.description": "このスニペットは、C# プロジェクトをデバッグするため VS Code を構成します。デバッグ オプション (例: 実行可能ファイルへの引数) は、'<project-directory>/Properties/launchSettings.json' ファイルを使用して構成できます。",
  "debuggers.dotnet.configurationSnippets.label": ".NET: C# プロジェクトの起動",
  "debuggers.dotnet.launch.launchConfigurationId.description": "使用する起動構成 ID。空の場合は現在アクティブな構成が使用されます。",
  "debuggers.dotnet.launch.projectPath.description": ".csproj ファイルへのパス。",
  "generateOptionsSchema.args.0.description": "プログラムに渡すコマンド ライン引数。",
  "generateOptionsSchema.args.1.description": "プログラムに渡されるコマンド ライン引数の文字列化バージョン。",
  "generateOptionsSchema.checkForDevCert.description": "Windows または macOS で Web プロジェクトを起動していて、これを有効にしているときにこのオプションを有効にすると、デバッガーはコンピューターに https エンドポイントで実行中の Web サーバーを開発するために使用される自己署名証明書がコンピューターにあるかどうかを確認します。指定しない場合、'serverReadyAction' が設定されていると既定値は true になります。このオプションは、Linux、VS Code リモート、および VS Code Web UI シナリオでは何もしません。HTTPS 証明書が見つからないか、または信頼されていない場合は、証明書をインストールまたは信頼するよう求めるメッセージがユーザーに表示されます。",
  "generateOptionsSchema.console.externalTerminal.enumDescription": "ターゲット プロセスは、自身の外部ターミナル内で実行されます。このモードを使用する場合は、Visual Studio Code と外部ターミナル ウィンドウの間でフォーカスを切り替える必要があります。",
  "generateOptionsSchema.console.integratedTerminal.enumDescription": "ターゲット プロセスは、VS Code の統合ターミナル内で実行されます。",
  "generateOptionsSchema.console.internalConsole.enumDescription": "ターゲット プロセスのコンソール入力 (stdin) と出力 (stdout/stderr) は、VS Code デバッグ コンソール経由でルーティングされます。",
  "generateOptionsSchema.console.markdownDescription": "ターゲット プログラムを起動するコンソールを示します。詳細については、https://aka.ms/VSCode-CS-LaunchJson-Console を参照してください。",
  "generateOptionsSchema.console.settingsDescription": "**注:** _このオプションは、'dotnet' デバッグ構成タイプで起動されたコンソール プロジェクトにのみ使用されます_。\r\n\r\nターゲット プログラムを起動するコンソールを示します。詳細については、https://aka.ms/VSCode-CS-LaunchJson-Console を参照してください。",
  "generateOptionsSchema.cwd.description": "デバッグ中のプログラムの作業ディレクトリへのパスです。既定値は現在のワークスペースです。",
  "generateOptionsSchema.debugServer.description": "デバッグ拡張機能の開発のみ。ポートが指定の VS Code の場合、サーバー モードで実行中のデバッグ アダプターへの接続が試行されます。",
  "generateOptionsSchema.enableStepFiltering.markdownDescription": "プロパティと演算子のステップ オーバーを有効にするフラグ。このオプションの既定値は 'true' です。",
  "generateOptionsSchema.env.description": "プログラムに渡される環境変数。",
  "generateOptionsSchema.envFile.markdownDescription": "ファイルによってプログラムに渡される環境変数。例: `${workspaceFolder}/.env`",
  "generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description": "true (既定の状態) の場合、デバッガーは単純なプロパティとメソッドの実行をシミュレーションすることで、より高速な評価を試みます。",
  "generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description": "true (既定の状態) の場合、デバッガーはプロパティ 'get' メソッドやその他の暗黙的な関数呼び出しを自動的に呼び出します。",
  "generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription": "true (既定の状態) の場合、デバッガーは自動的に 'ToString' を呼び出してオブジェクトをフォーマットします。'allowImplicitFuncEval' が 'false' の場合、このオプションは効果がありません。",
  "generateOptionsSchema.expressionEvaluationOptions.description": "データ ヒント、デバッグ ビューの 'Watch' セクションと 'Variables' セクション、またはデバッグ コンソールでデバッガーが式を評価する方法を制御するオプション。",
  "generateOptionsSchema.expressionEvaluationOptions.showRawValues.description": "true の場合、デバッガーは変数ウィンドウにオブジェクトの生の構造を表示します。",
  "generateOptionsSchema.externalConsole.markdownDescription": "属性 `externalConsole` は非推奨です。代わりに `console` を使用してください。このオプションの既定値は `false` です。",
  "generateOptionsSchema.justMyCode.markdownDescription": "有効 (既定) の場合、デバッガーはユーザー コード (\"マイ コード\") のみを表示してステップ インし、最適化されたシステム コードやその他のコード、またはデバッグ シンボルを含まないコードを無視します。[詳細情報](https://aka.ms/VSCode-CS-LaunchJson-JustMyCode)",
  "generateOptionsSchema.launchBrowser.args.description": "ブラウザーを開くためにコマンドに渡す引数。これは、プラットフォーム固有の要素 ('osx'、'linux'、または 'windows') で 'args' の値が指定されていない場合にのみ使用されます。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.description": "起動の一環として Web ブラウザーを起動するためのオプションについて説明します",
  "generateOptionsSchema.launchBrowser.enabled.description": "Web ブラウザーの起動が有効になっているかどうか。このオプションの既定値は `true` です。",
  "generateOptionsSchema.launchBrowser.linux.args.description": "ブラウザーを開くためにコマンドに渡す引数。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.linux.command.description": "Web ブラウザーを起動する実行可能ファイル。",
  "generateOptionsSchema.launchBrowser.linux.description": "Linux 固有の Web 起動構成オプション。既定では、これは `xdg-open` を使用してブラウザーを起動します。",
  "generateOptionsSchema.launchBrowser.osx.args.description": "ブラウザーを開くためにコマンドに渡す引数。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.osx.command.description": "Web ブラウザーを起動する実行可能ファイル。",
  "generateOptionsSchema.launchBrowser.osx.description": "OSX 固有の Web 起動構成オプション。既定では、これは `open` を使用してブラウザーを起動します。",
  "generateOptionsSchema.launchBrowser.windows.args.description": "ブラウザーを開くためにコマンドに渡す引数。${auto-detect-url} を使用して、サーバーがリッスンしているアドレスを自動的に使用します。",
  "generateOptionsSchema.launchBrowser.windows.command.description": "Web ブラウザーを起動する実行可能ファイル。",
  "generateOptionsSchema.launchBrowser.windows.description": "Windows 固有の Web 起動構成オプション。既定では、これは `cmd /c start` を使用してブラウザーを起動します。",
  "generateOptionsSchema.launchSettingsFilePath.markdownDescription": "launchSettings.json ファイルへのパス。これが設定されていない場合、デバッガーは `{cwd}/Properties/launchSettings.json` を検索します。",
  "generateOptionsSchema.launchSettingsProfile.description": "指定した場合、使用する launchSettings.json 内のプロファイルの名前を示します。launchSettings.json が見つからない場合、これは無視されます。launchSettings.json は、'launchSettingsFilePath' プロパティで指定されたパスから読み取られ、それが設定されていない場合は {cwd}/Properties/launchSettings.json から読み込まれます。これが null または空の文字列に設定されている場合、launchSettings.json は無視されます。この値が指定されていない場合は、最初の 'Project' プロファイルが使用されます。",
  "generateOptionsSchema.logging.browserStdOut.markdownDescription": "Web ブラウザーを起動してから StdOut テキストを出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.consoleUsageMessage.description": "ターゲット プロセスが 'Console.Read*' API を呼び出し、stdin がコンソールにリダイレクトされたときにメッセージがログに記録されるかどうかを制御します。",
  "generateOptionsSchema.logging.description": "どの種類のメッセージを出力ウィンドウに記録する必要があるかを決定するフラグです。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription": "すべてのデバッガー API 呼出しを出力します。これは、非常に詳細です。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription": "デバッガー API 呼び出しからのエラーを出力します。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription": "Microsoft.VisualStudio.Debugger.Engine/vsdebugeng.h への API 呼び出しを出力ウィンドウに出力するかどうかを制御します。このオプションの既定値は `none` です。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription": "API 呼び出しのトレースを無効にする",
  "generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription": "基になるランタイムによって発生するイベントについての詳細トレースを有効にするかどうかを決定するフラグ。このオプションの既定値は、`false` です。",
  "generateOptionsSchema.logging.diagnosticsLog.description": "デバッガーの診断ログから出力ウィンドウに出力するメッセージを制御する設定です。このログは、デバッガーの問題のトラブルシューティングに役立ちます。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription": "エラーレベルの診断メッセージを出力します。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription": "重要な診断メッセージを出力します。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription": "デバッガーのディスパッチャーから出力ウィンドウに出力するメッセージを制御します。指定がない場合の既定値は `none` です。ただし、いずれかの詳細ログ設定 (`debugEngineAPITracing`、`debugRuntimeEventTracing`、`expressionEvaluationTracing` または `startDebuggingTracing`) が有効な場合、デフォルト値は `normal` に変更されます。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription": "追加の診断メッセージは出力しません。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription": "すべての詳細でない診断メッセージを出力します。",
  "generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription": "式評価についての詳細トレースを有効にするかどうかを決定するフラグ。このオプションの既定値は、`false` です。",
  "generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription": "C# デバッガーと UI の間で交換される DAP プロトコル メッセージを出力ウィンドウにログ出力するかどうかを決定するフラグ。このオプションの既定値は、`false` です。",
  "generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription": "デバッグの開始についての詳細トレースを有効にするかどうかを決定するフラグ。このオプションの既定値は、`false` です。",
  "generateOptionsSchema.logging.elapsedTiming.markdownDescription": "true の場合、プロトコル メッセージ ログには `adapterElapsedTime` プロパティと `engineElapsedTime` プロパティが含まれ、要求にかかった時間がマイクロ秒単位で示されます。このオプションの既定値は `false` です。",
  "generateOptionsSchema.logging.engineLogging.deprecationMessage": "'logging.engineLogging' は非推奨になりました。'logging.diagnosticsLog.protocolMessages' を使用してください。",
  "generateOptionsSchema.logging.exceptions.markdownDescription": "例外メッセージを出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.moduleLoad.markdownDescription": "モジュール読み込みイベントを出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.processExit.markdownDescription": "ターゲット プロセスを終了するとき、またはデバッグを停止するときにメッセージをログに記録するかどうかを制御します。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.programOutput.markdownDescription": "外部コンソールを使用していないときに、プログラムの出力を出力ウィンドウに記録するかどうかを決定するフラグです。このオプションの既定値は `true` です。",
  "generateOptionsSchema.logging.threadExit.markdownDescription": "ターゲット プロセスのスレッドが終了するときにメッセージをログに記録するかどうかを制御します。このオプションの既定値は `false` です。",
  "generateOptionsSchema.pipeTransport.debuggerPath.description": "対象マシン上のデバッガーへの完全なパス。",
  "generateOptionsSchema.pipeTransport.description": "これを指定すると、デバッガーにより、別の実行可能ファイルをパイプとして使用してリモート コンピューターに接続され、VS Code と .NET Core デバッガー バックエンド実行可能ファイル (vsdbg) との間で標準入出力が中継されます。",
  "generateOptionsSchema.pipeTransport.linux.description": "Linux 固有のパイプ起動構成オプション",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.linux.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.linux.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.linux.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.linux.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.pipeTransport.osx.description": "OSX 固有のパイプ起動構成オプション",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.osx.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.osx.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.osx.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.osx.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.pipeTransport.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.pipeTransport.windows.description": "Windows 固有のパイプ起動構成オプション",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description": "パイプ プログラムに渡されるコマンド ライン引数。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description": "パイプ プログラムに渡されるコマンド ライン引数の文字列化バージョン。pipeArgs のトークン ${debuggerCommand} は完全なデバッガー コマンドに置き換えられ、このトークンは他の引数と共にインラインで指定できます。${debuggerCommand} がどの引数でも使用されていない場合は、代わりに完全なデバッガー コマンドが引数リストの末尾に追加されます。",
  "generateOptionsSchema.pipeTransport.windows.pipeCwd.description": "パイプ プログラムに渡す作業ディレクトリの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.windows.pipeEnv.description": "パイプ プログラムに渡す環境変数。",
  "generateOptionsSchema.pipeTransport.windows.pipeProgram.description": "実行するパイプ コマンドの完全修飾パス。",
  "generateOptionsSchema.pipeTransport.windows.quoteArgs.description": "引用符で囲む必要がある文字 (スペースなど) を含む引数を引用符で囲む必要がありますか? 既定値は 'true' です。false に設定すると、デバッガー コマンドは自動的に引用符で囲まれます。",
  "generateOptionsSchema.processId.0.markdownDescription": "アタッチ先のプロセス ID。\"\" を使用して、アタッチ先の実行中のプロセスの一覧を取得します。`processId` を使用する場合は、`processName` は使用しないでください。",
  "generateOptionsSchema.processId.1.markdownDescription": "アタッチ先のプロセス ID。\"\" を使用して、アタッチ先の実行中のプロセスの一覧を取得します。`processId` を使用する場合は、`processName` は使用しないでください。",
  "generateOptionsSchema.processName.markdownDescription": "アタッチ先のプロセス名。これを使用する場合は、`processId` は使用しないでください。",
  "generateOptionsSchema.program.markdownDescription": "起動するアプリケーション dll または .NET Core ホスト実行可能ファイルへのパス。\r\nこのプロパティは通常、次の形式になります: `${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)`\r\n\r\n例: `${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll`\r\n\r\n場所:\r\n`(target-framework)` は、デバッグ対象のプロジェクトがビルドされているフレームワークです。これは通常、`TargetFramework` プロパティとしてプロジェクト ファイルで見つかります。\r\n\r\n`(project-name.dll)` は、デバッグ対象プロジェクトのビルド出力 dll の名前です。これは通常、プロジェクト ファイル名と同じですが、拡張子は '.dll' です。",
  "generateOptionsSchema.requireExactSource.markdownDescription": "PDB に一致する現在のソース コードを必要とするフラグです。このオプションの規定値は `true` です。",
  "generateOptionsSchema.sourceFileMap.markdownDescription": "ビルド時のパスをローカル ソースの場所にマップします。ビルド時のパスのすべてのインスタンスは、ローカル ソース パスに置き換えられます。\r\n\r\n例: \r\n\r\n`{\"<build-path>\":\"<local-source-path>\"}`",
  "generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription": "この URL の Source Link は有効になっていますか? 指定しない場合、このオプションの既定値は `true` です。",
  "generateOptionsSchema.sourceLinkOptions.markdownDescription": "Source Link が Web サーバーに接続する方法を制御するオプション。[詳細情報](https://aka.ms/VSCode-DotNet-SourceLink)",
  "generateOptionsSchema.stopAtEntry.markdownDescription": "true の場合、デバッガーはターゲットのエントリ ポイントで停止する必要があります。このオプションの既定値は `false` です。",
  "generateOptionsSchema.suppressJITOptimizations.markdownDescription": "TRUE の場合、最適化されたモジュール (リリース構成でコンパイルされた .dll) がターゲット プロセスに読み込まれると、デバッガーは最適化を無効にしてコードをするよう Just-In-Time コンパイラに要求します。[詳細情報](https://aka.ms/VSCode-CS-LaunchJson-SuppressJITOptimizations)",
  "generateOptionsSchema.symbolOptions.cachePath.description": "シンボル サーバーからダウンロードしたシンボルをキャッシュするディレクトリです。指定しない場合、Windows のデバッガーの規定値は %TEMP%\\SymbolCache に、Linux および macOS のデバッガーの既定値は ~/.dotnet/symbolcache になります。",
  "generateOptionsSchema.symbolOptions.description": "シンボル (.pdb ファイル) の検索と読み込みの方法を制御するオプションです。",
  "generateOptionsSchema.symbolOptions.moduleFilter.description": "デバッガーが、シンボル (.pdb ファイル) を読み込もうとするモジュール (.dll ファイル) を制御するオプションを提供します。",
  "generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description": "デバッガーがシンボルを読み込んではいけないモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\r\n\r\n'mode' が 'loadAllButExcluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description": "True の場合、'includedModules' 配列にないモジュールの場合、デバッガーはモジュール自体と起動中の実行可能ファイルの横を確認しますが、シンボル検索リストのパスはチェックしません。このオプションの既定値は 'true' です。\r\n\r\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description": "true の場合、'includedModules' 配列にないモジュールに対して、デバッガーは、モジュールにステップインしようとしたときなど、シンボルが必要であることを検出したときにシンボルのダウンロードを試みます。このオプションの既定値は 'true' です。\r\n\r\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description": "デバッガーがシンボルを読み込むべきモジュールの配列です。ワイルドカード (例: MyCompany.*.dll) がサポートされています。\r\n\r\n'mode' が 'loadOnlyIncluded' に設定されていない限り、このプロパティは無視されます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.description": "モジュール フィルターが動作する 2 つの基本的な動作モードを制御します。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription": "モジュールが 'excludedModules' 配列内にある場合を除き、すべてのモジュールのシンボルを読み込みます。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription": "モジュールが 'includedModules' 配列に含まれていない場合、または 'includeSymbolsNextToModules' 設定を介して含まれていない場合は、どのモジュールに対してもシンボルを読み込もうとしてはいけません。",
  "generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description": "'true' の場合、Microsoft シンボルサーバー (https​://msdl.microsoft.com​/download/symbols) がシンボルの検索パスに追加されます。指定しない場合、このオプションの既定値は 'false' です。",
  "generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description": "'true' の場合、NuGet.org シンボルサーバー (https​://symbols.nuget.org​/download/symbols) がシンボルの検索パスに追加されます。指定しない場合、このオプションの既定値は 'false' です。",
  "generateOptionsSchema.symbolOptions.searchPaths.description": "シンボル サーバーの URL (example: http​://MyExampleSymbolServer) またはディレクトリ (example: /build/symbols) の配列であり、ここで .pdb ファイルが検索されます。既定の場所に加えて (つまり、モジュールと、pdb が最初にドロップされたパスの後に)、これらのディレクトリが検索されることになります。",
  "generateOptionsSchema.targetArchitecture.markdownDescription": "[ローカルの macOS デバッグのみでサポート]\r\n\r\nデバッグ対象のアーキテクチャ。このパラメーターを設定しない場合は、自動的に検出されます。可能な値は、 `x86_64` または `arm64`. です。",
  "generateOptionsSchema.targetOutputLogPath.description": "設定すると、ターゲット アプリケーションが StdOut および stderr (例: Console.WriteLine) に書き込むテキストが指定したファイルに保存されます。コンソールが internalConsole 以外に設定されている場合、このオプションは無視されます。例: '${workspaceFolder}/out.txt'",
  "generateOptionsSchema.type.markdownDescription": "デバッグするコードの種類を入力します。.NET Core デバッグの場合は `coreclr`、デスクトップ .NET Framework の場合は `clr` のいずれかを指定できます。デスクトップ フレームワークは Windows 専用であるため、`clr` は Windows でのみ動作します。",
  "viewsWelcome.debug.contents": "[ビルドおよびデバッグ用の C# 資産の生成](command:dotnet.generateAssets)\r\n\r\nlaunch.json の詳細については、[C# デバッグ用の launch.json の構成](https://aka.ms/VSCode-CS-LaunchJson). を参照してください。"
}