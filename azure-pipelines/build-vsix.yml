parameters:
- name: versionNumberOverride
  type: string
  default: 'default'
- name: isOfficial
  type: boolean
- name: dotnetVersion
  type: string
- name: channel
  values:
  - release
  - prerelease
  - auto
  default: auto
- name: signType
  values:
  - test
  - real
  - auto
  default: auto

stages:
- stage: BuildVSIX
  displayName: 'Build VSIXs'
  dependsOn: []
  jobs:
  - job: SetRunVariables
    displayName: 'Set Run Variables'
    pool:
      ${{ if eq(parameters.isOfficial, true) }}:
        name: netcore1espool-internal
        image: 1es-ubuntu-2204
      ${{ else }}:
        name: Azure Pipelines
        vmImage: ubuntu-latest
      os: linux
    steps:
    - pwsh: |
        $isPrerelease = $true
        if ("${{ parameters.channel }}" -eq "release") {
          Write-Host "Channel override set to release, using release channel."
          $isPrerelease = $false
        } elseif ("${{ parameters.channel }}" -eq "prerelease") {
          Write-Host "Channel override set to prerelease, using prerelease channel."
          $isPrerelease = $true
        } else {
          Write-Host "Channel override is ${{ parameters.channel }}, using branch configuration to determine release channel."
          Write-Host "Detected branch $(Build.SourceBranchName)"
          if ("$(Build.SourceBranchName)" -eq "release") {
            Write-Host "Branch is release, using release channel."
            $isPrerelease = $false
          } else {
            Write-Host "Branch is not release, using prerelease channel."
            $isPrerelease = $true
          }
        }

        if ( $isPrerelease ) {
          Write-Host "Setting pipeline channel variable to Prerelease."
          Write-Host "##vso[task.setvariable variable=channel;isoutput=true]Prerelease"
        } else {
          Write-Host "Setting pipeline channel variable to Release."
          Write-Host "##vso[task.setvariable variable=channel;isoutput=true]Release"
        }
      name: passChannel
      displayName: Set Channel Variable

    - pwsh: |
        $signType = "test"
        if ("${{ parameters.isOfficial }}" -ne "true") {
          Write-Host "Not an official build, test signing"
          $signType = "test"
        } elseif ("${{ parameters.signType }}"  -eq "test") {
          Write-Host "Sign type override set to ${{ parameters.signType }}"
          $signType = "test"
        } elseif ("${{ parameters.signType }}"  -eq "real") {
          Write-Host "Sign type override set to ${{ parameters.signType }}"
          $signType = "real"
        } else {
          Write-Host "Sign type override is ${{ parameters.signType }}, using branch configuration to determine sign type"
          Write-Host "Detected branch $(Build.SourceBranchName)"
          if ( ("$(Build.SourceBranchName)" -eq "release") -or ("$(Build.SourceBranchName)" -eq "prerelease")) {
            Write-Host "Branch is a release branch, using real sign type."
            $signType = 'real'
          } else {
            Write-Host "Branch is test branch, using test sign type."
            $signType = 'test'
          }
        }

        Write-Host "Setting pipeline signType variable to " $signType
        Write-Host "##vso[task.setvariable variable=signType;isoutput=true]$signType"
      name: passSignType
      displayName: Set Sign Type

  - job: 'Build_vsixs'
    displayName: 'Build VSIXs'
    pool:
      ${{ if eq(parameters.isOfficial, true) }}:
        name: netcore1espool-internal
        image: 1es-ubuntu-2204
      ${{ else }}:
        name: Azure Pipelines
        vmImage: ubuntu-latest
      os: linux
    dependsOn: SetRunVariables
    variables:
      channel: $[ dependencies.SetRunVariables.outputs['passChannel.channel'] ]
      signType: $[ dependencies.SetRunVariables.outputs['passSignType.signType'] ]
      teamName: DotNetCore
    ${{ if eq(parameters.isOfficial, true) }}:
      templateContext:
        outputs:
          - output: pipelineArtifact
            path: $(Build.SourcesDirectory)/Packages
            artifact: Packages
            condition: always()
          - output: pipelineArtifact
            path: $(Build.SourcesDirectory)/out/logs
            artifact: SigningLogs
            condition: always()
    steps:
    - checkout: self
      clean: true
      submodules: true
      fetchTags: false
      fetchDepth: 0
    - template: /azure-pipelines/prereqs.yml@self
      parameters:
        versionNumberOverride: ${{ parameters.versionNumberOverride }}
        dotnetVersion: ${{ parameters.dotnetVersion}}

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.11'
      inputs:
        versionSpec: 3.11

    # Non-windows signing requires .NET 8 installed on the machine.
    - task: UseDotNet@2
      displayName: Use .NET Core sdk 8.0.x
      inputs:
        version: 8.0.x

    # If we're in an official build, install the signing plugin
    - ${{ if eq(parameters.isOfficial, true) }}:
      - task: MicroBuildSigningPlugin@4
        displayName: ðŸ”§ Install MicroBuild Signing Plugin
        inputs:
          signType: $(signType)
          zipSources: false
          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
          azureSubscription: 'MicroBuild Signing Task (DevDiv)'
          # ConnectedPMEServiceName is only required for CI builds. This service name is dependent on the AzDo org as well.
          ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
            ConnectedPMEServiceName: c24de2a5-cc7a-493d-95e4-8e5ff5cad2bc
        env:
          SignType: $(signType)
          TeamName: $(teamName)

    - pwsh: |
        Write-Host "Building VSIXs for channel $(channel)"
        if ("$(channel)" -eq "Release") {
          gulp vsix:release:package
        } else {
          gulp vsix:release:package --prerelease
        }
      displayName: 'Build VSIXs'
      env:
        SignType: $(signType)
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    - ${{ if eq(parameters.isOfficial, true) }}:
      - script: gulp signVsix
        condition: succeeded()
        displayName: 'Sign VSIXs'
        env:
          # Non-windows signing requires this token to be passed with signing step.
          SignType: $(signType)
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/vsix'
        TargetFolder: '$(Build.SourcesDirectory)/Packages/VSIX_$(channel)'

    - ${{ if eq(parameters.isOfficial, true) }}:
      - script: gulp verifyVsix
        condition: and( succeeded(), eq('$(SignType)', 'Real'))
        displayName: ðŸ”‘ Verify VSIX Signature Files
        workingDirectory: '$(Build.SourcesDirectory)/Packages/VSIX_$(channel)'

    - ${{ if ne(parameters.isOfficial, true) }}:
      - task: PublishPipelineArtifact@1
        condition: succeeded()
        displayName: 'Publish VSIXs'
        inputs:
          targetPath: '$(Build.SourcesDirectory)/Packages'
          artifact: 'Packages'

    - script: npm run test:artifacts
      displayName: 'Run artifacts tests'
