trigger: none # We only want to trigger manually or based on resources
pr: none

#schedules:
#- cron: "0 6 * * *" # Daily @ 10 PM PST
#  displayName: Daily vs-green insertion
#  branches:
#    include:
#    - feature/lsp_tools_host

parameters:
  - name: InsertTargetBranch
    displayName: Target branch
    type: string
    default: main

resources:
  pipelines:
  - pipeline: BlueCI
    source: vscode-csharp-next
    branch: feature/lsp_tools_host
  repositories:
  - repository: VSCodeExtensionRepo
    type: git
    name: vs-green

jobs:
- job: npmpack
  displayName: üóúÔ∏è VSIX to NPM
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: none
  - task: NodeTool@0
    displayName: ‚öôÔ∏è Install Node.js
    inputs:
      versionSource: spec
      versionSpec: 16.x
  - powershell: |
      "registry=https://pkgs.dev.azure.com/devdiv/DevDiv/_packaging/vs-green/npm/registry/`nalways-auth=true`n" | Tee-Object -FilePath '$(Pipeline.Workspace)/.npmrc'
    displayName: ‚öôÔ∏è Prepare for publish
  - task: npmAuthenticate@0
    displayName: üîè Authenticate NPM feed
    inputs:
      workingFile: $(Pipeline.Workspace)/.npmrc
  - download: BlueCI
    displayName: üîª Download C# extension
  - pwsh: |
      Get-ChildItem -Path '$(Pipeline.Workspace)/BlueCI/VSIXs*/*.vsix' -Recurse |% {
        if ($_.Name -Match '^csharp-(?<os>\w+)-(?<arch>\w+)-(?<version>\d+\.\d+\.\d+(-[\w\.]+)?).vsix$') {
          $version = $Matches['version']
          Write-Host "##vso[build.updatebuildnumber]$version"
          break
        }
      }

      if (!$version) {
        throw "Could not find a VSIX to extract version info from."
      }
    displayName: ‚öôÔ∏è Set build number
  - pwsh: |
      Function Spawn-Tool($command, $commandArgs, $workingDirectory) {
        if ($workingDirectory) {
          Push-Location $workingDirectory
        }
        try {
          Write-Host "$pwd >"
          Write-Host "##[command]$command $commandArgs"
          & $command @commandArgs
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
        } finally {
          if ($workingDirectory) {
            Pop-Location
          }
        }
      }

      # Identify the last attempt artifact.
      $vsixSrc = @(Get-ChildItem -Path '$(Pipeline.Workspace)/BlueCI/VSIXs*' -Directory | Sort-Object -Property Name -Descending)[0]

      $InsertNpmDependencies = ''
      Get-ChildItem -Path $vsixSrc -Filter '*.vsix' |% {
        if ($_.Name -Match '^csharp-(?<os>\w+)-(?<arch>\w+)-(?<version>\d+\.\d+\.\d+(-[\w\.]+)?).vsix$') {
          $version = $Matches['version']
          $os = $Matches['os']
          $arch = $Matches['arch']
          $vsix = $_.FullName
          $npmName = "@microsoft/csharp-vscode-extension.$os-$arch"

          $packageNameAndVersion = "$npmName@$version"
          $InsertNpmDependencies += "$packageNameAndVersion "
          & npm view $packageNameAndVersion --userconfig $(Pipeline.Workspace)/.npmrc
          # If the command succeeded it means the package is already published, so we need to skip it.
          if ($LASTEXITCODE -eq 0) {
            Write-Host "$packageNameAndVersion is already published, skipping."
          } else {
            Write-Host "##[group]Translating $os-$arch VSIX to NPM package $npmName"
            $packageStagingDir = "$(Agent.TempDirectory)/csharp/$os-$arch"
            New-Item -Type Directory -Path $packageStagingDir | Set-Location
            Spawn-Tool '7z' ('x', '-y', $vsix)
            Set-Content -Path package.json -Value "{`n  `"description`": `"C# for Visual Studio Code ($os-$arch) as NPM package for insertion into the C# Dev Kit extension for testing.`"`n}"
            Spawn-Tool 'npm' ('pkg','set',"name=$npmName","version=$version",'publishConfig.registry=https://pkgs.dev.azure.com/devdiv/DevDiv/_packaging/vs-green/npm/registry/','repository.type=git','repository.url=https://devdiv.visualstudio.com/DevDiv/_git/vscode-csharp-next',"repository.commit=$(resources.pipeline.BlueCI.sourceCommit)")
            Get-Content -Path package.json
            Spawn-Tool 'npm' @('publish','--userconfig','$(Pipeline.Workspace)/.npmrc')
            Write-Host "##[endgroup]"
          }
        }
      }

      if (!$InsertNpmDependencies) {
        throw "Could not find a VSIX to publish."
      }

      Write-Host "Writing InsertNpmDependencies output variable with value: `"$InsertNpmDependencies`""
      Write-Host "##vso[task.setvariable variable=InsertNpmDependencies;isoutput=true]$InsertNpmDependencies"
    displayName: üì¶ npm pack & publish
    name: npmpublish

- template: azure-pipelines/external/component-insertion.yml@VSCodeExtensionRepo
  parameters:
    dependsOn: npmpack
    variables:
      InsertNpmDependencies: $[dependencies.npmpack.outputs['npmpublish.InsertNpmDependencies']]
      InsertReviewers: '.NET Developer Experience Productivity'
    sourceBranch: $(resources.pipeline.BlueCI.sourceBranch)
    sourceCommit: $(resources.pipeline.BlueCI.sourceCommit)
    runName: $(Build.BuildNumber)
    runID: $(resources.pipeline.BlueCI.runID)
    pipelineID: $(resources.pipeline.BlueCI.pipelineID)
    InsertTargetBranch: ${{ parameters.InsertTargetBranch }}
    ComponentSubDir: dependency-extensions
