parameters:
- name: versionNumberOverride
  type: string
  default: 'default'
- name: platform
  type: string
- name: pool
  type: object
- name: isOfficial
  type: boolean
- name: dotnetVersion
  type: string

jobs:
- job: 'Build_${{ parameters.platform }}_vsixs'
  pool: ${{ parameters.pool }}
  displayName: 'Build ${{ parameters.platform }} vsixs'
  dependsOn: SetRunVariables
  variables:
    channel: $[ dependencies.SetRunVariables.outputs['passChannel.channel'] ]
    signType: $[ dependencies.SetRunVariables.outputs['passSignType.signType'] ]
    teamName: DotNetCore
  steps:
  - checkout: self
    clean: true
    submodules: true
    fetchTags: false
    fetchDepth: 0
  - template: /azure-pipelines/prereqs.yml@self
    parameters:
      versionNumberOverride: ${{ parameters.versionNumberOverride }}
      dotnetVersion: ${{ parameters.dotnetVersion}}

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.11'
    inputs:
      versionSpec: 3.11

  # If we're in an official build, install the signing plugin
  - ${{ if eq(parameters.isOfficial, true) }}:
    - task: MicroBuildSigningPlugin@4
      displayName: ðŸ”§ Install MicroBuild Signing Plugin
      inputs:
        signType: $(signType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
        azureSubscription: 'MicroBuild Signing Task (DevDiv)'
      env:
        SignType: $(signType)
        TeamName: $(teamName)

  - pwsh: |
      Write-Host "Building VSIXs for platform ${{ parameters.platform }} and channel $(channel)"
      if ("$(channel)" -eq "Release") {
        gulp vsix:release:package:${{ parameters.platform }}
      } else {
        gulp vsix:release:package:${{ parameters.platform }} --prerelease
      }
    displayName: 'Build VSIXs'
    env:
      SignType: $(signType)

  - ${{ if eq(parameters.isOfficial, true) }}:
    - script: gulp signVsix
      condition: succeeded()
      displayName: 'Sign VSIXs'
      env:
        SignType: $(signType)

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/vsix'
      TargetFolder: '$(Build.SourcesDirectory)/Packages/VSIX_$(channel)'

  - ${{ if eq(parameters.isOfficial, true) }}:
    - task: 1ES.PublishBuildArtifacts@1
      condition: succeeded()
      displayName: 'Publish VSIXs'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/Packages'
        ArtifactName: 'Packages'
    - task: 1ES.PublishBuildArtifacts@1
      condition: succeededOrFailed()
      displayName: 'Publish Signing Logs'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/out/logs'
        ArtifactName: '${{ parameters.platform }} Signing Logs'

  - ${{ else }}:
    - task: PublishBuildArtifacts@1
      condition: succeeded()
      displayName: 'Publish VSIXs'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/Packages'
        ArtifactName: 'Packages'

  - script: npm run test:artifacts
    displayName: 'Run artifacts tests'
