trigger: none
pr: none

parameters:
  - name: test
    type: boolean
    default: true

variables:
# This is expected to provide pat to tag release.
- group: DncEng-Partners-Tokens

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
  pipelines:
  - pipeline: officialBuildCI
    source: dotnet-vscode-csharp
    branch: main
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: netcore1espool-internal
      image: 1es-windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: PublishStage
      jobs:
      - deployment: PublishToMarketplace
        displayName: PublishToMarketplace
        environment: vscode-csharp-release-approvals
        pool:
          name: netcore1espool-internal
          image: 1es-ubuntu-2204
          os: linux
        templateContext:
          type: releaseJob
          isProduction: true
          inputs:
          - input: pipelineArtifact
            pipeline: officialBuildCI
            artifactName: Packages
            destinationPath: $(Pipeline.Workspace)
        strategy:
          runOnce:
            deploy:
              steps:
              - template: /azure-pipelines/install-node.yml@self
              - pwsh: |
                  npm install --global @vscode/vsce
                displayName: 'Install vsce'
              - task: AzureCLI@2
                displayName: 'ðŸš€ Publish to Marketplace'
                inputs:
                  azureSubscription: 'VSCode Marketplace Publishing'
                  scriptType: "pscore"
                  scriptLocation: 'inlineScript'
                  workingDirectory: $(Pipeline.Workspace)
                  inlineScript: |
                    # Choose whether to upload to prerelease or release based on the artifacts generated by the build pipeline.
                    $artifactFolder = ""
                    $uploadPrerelease = $true
                    if (Test-Path -Path "VSIX_Prerelease") {
                        $artifactFolder = "VSIX_Prerelease"
                        $uploadPrerelease = $true
                    } elseif (Test-Path -Path "VSIX_Release") {
                        $artifactFolder = "VSIX_Release"
                        $uploadPrerelease = $false
                    } else {
                        throw "No artifacts are downloaded."
                    }

                    Write-Host "Uploading artifacts from $artifactFolder with prerelease=$uploadPrerelease"

                    # Our build pipeline would generated build based on attempt number. Publishing the latest attempt.
                    $allArtifacts = Get-ChildItem -Path "$artifactFolder*" | Sort-Object -Descending
                    if ($allArtifacts.Length -eq 0) {
                      throw "No artifacts in $artifactFolder"
                    }

                    $publishArtifacts = $allArtifacts[0]
                    Write-Host "All artifacts: $($allArtifacts). Publishing $($publishArtifacts)."

                    $basePublishArgs = , "publish"
                    If ( $uploadPrerelease ) {
                      $basePublishArgs += "--pre-release"
                      Write-Host "Publish to pre-release channel."
                    } Else {
                      Write-Host "Publish to release channel."
                    }
                    $basePublishArgs += '--azure-credential'
                    $basePublishArgs += '--packagePath'
                    $publishArgs = $basePublishArgs + (Get-ChildItem $publishArtifacts\*.vsix | Sort-Object Name -Descending |% { $_ })
                    $publishArgs += '--manifestPath'
                    $publishArgs += (Get-ChildItem $publishArtifacts\*.manifest | Sort-Object Name -Descending |% { $_ })
                    $publishArgs += '--signaturePath'
                    $publishArgs += (Get-ChildItem $publishArtifacts\*.signature.p7s | Sort-Object Name -Descending |% { $_ })

                    If ("${{ parameters.test }}" -eq "true") {
                      Write-Host "In test mode, command is printed instead of run."
                      Write-Host "##[command]vsce $publishArgs"

                      Write-Host "ðŸ”’ Verify PAT."
                      vsce verify-pat --azure-credential ms-dotnettools
                    }
                    Else {
                      Write-Host "##[command]vsce $publishArgs"
                      vsce @publishArgs
                    }
    - stage: 'TagRelease'
      displayName: 'Tag release of vscode-csharp'
      dependsOn: 'PublishStage'
      condition: succeeded('PublishStage')
      jobs:
      - job: 'Tag'
        pool:
          name: netcore1espool-internal
          image: 1es-ubuntu-2204
          os: linux
        steps:
        - checkout: self
          clean: true
          submodules: true
          fetchTags: false
          fetchDepth: 0
        - template: /azure-pipelines/install-node.yml@self
        - pwsh: |
            git checkout $(resources.pipeline.officialBuildCI.sourceCommit)
          displayName: 'Checkout build source branch'
        - pwsh: |
            npm ci
            npm install
            npm install -g gulp
            gulp installDependencies
          displayName: 'Install dependencies.'
        - pwsh: |
            # build number is generated by nerdbank git versioning and set to AzureDev
            gulp createTags --releaseVersion $(resources.pipeline.officialBuildCI.runName) --releaseCommit $(resources.pipeline.officialBuildCI.sourceCommit) --dryRun ${{ parameters.test }}
          env:
            GitHubPAT: $(BotAccount-dotnet-bot-content-rw-grained-pat)
          displayName: 'Create release tags'
