{
  "command.csharp.attachToProcess": "附加到 .NET 5+ 或 .NET Core 进程",
  "command.csharp.downloadDebugger": "下载 .NET Core 调试程序",
  "command.csharp.listProcess": "列出要附加的进程",
  "command.csharp.listRemoteDockerProcess": "列出 Docker 连接上的进程",
  "command.csharp.listRemoteProcess": "列出远程连接上要附加的进程",
  "command.csharp.reportIssue": "报告问题",
  "command.csharp.showDecompilationTerms": "显示反编译程序条款协议",
  "command.dotnet.generateAssets.currentProject": "生成用于生成和调试的资产",
  "command.dotnet.openSolution": "打开解决方案",
  "command.dotnet.restartServer": "重启语言服务器",
  "command.dotnet.restore.all": "还原所有项目",
  "command.dotnet.restore.project": "还原项目",
  "command.dotnet.test.debugTestsInContext": "在上下文中调试测试",
  "command.dotnet.test.runTestsInContext": "在上下文中运行测试",
  "command.extension.showRazorCSharpWindow": "显示 Razor CSharp",
  "command.extension.showRazorHtmlWindow": "显示 Razor Html",
  "command.o.fixAll.document": "修复文档中出现的所有代码问题",
  "command.o.fixAll.project": "修复项目中出现的所有代码问题",
  "command.o.fixAll.solution": "修复解决方案中出现的所有代码问题",
  "command.o.pickProjectAndStart": "选择项目",
  "command.o.reanalyze.allProjects": "分析所有项目",
  "command.o.reanalyze.currentProject": "分析当前项目",
  "command.o.restart": "重新启动 OmniSharp",
  "command.razor.reportIssue": "报告 Razor 问题",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": "显示创建隐式对象的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": "显示具有推断类型的变量的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForIndexerParameters": "显示索引器的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": "显示 lambda 参数类型的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForTypes": "显示内联类型提示",
  "configuration.dotnet.autoInsert.enableAutoInsert": "启用文档注释的自动插入。",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "运行以下项的后台代码分析: (之前为 \"omnisharp.enableRoslynAnalyzers\")",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.fullSolution": "整个解决方案",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.none": "无",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.openFiles": "打开的文档",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope": "显示以下的编译器错误和警告:",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.fullSolution": "整个解决方案",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.none": "无",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.openFiles": "打开的文档",
  "configuration.dotnet.codeLens.enableReferencesCodeLens": "指定是否应显示引用 CodeLens。(之前为 \"csharp.referencesCodeLens.enabled\")",
  "configuration.dotnet.codeLens.enableTestsCodeLens": "指定是否应显示运行和调试测试 CodeLens。(之前为 \"csharp.testsCodeLens.enabled\")",
  "configuration.dotnet.completion.provideRegexCompletions": "在完成列表中显示正则表达式。",
  "configuration.dotnet.completion.showCompletionItemsFromUnimportedNamespaces": "支持在完成列表中显示未导入的类型和未导入的扩展方法。提交后，相应的 using 指令将添加到当前文件的顶部。(之前为 \"omnisharp.enableImportCompletion\")",
  "configuration.dotnet.completion.showNameCompletionSuggestions": "对最近选择的成员执行自动对象名称完成。",
  "configuration.dotnet.completion.triggerCompletionInArgumentLists": "自动显示参数列表中的补全列表",
  "configuration.dotnet.defaultSolution.description": "要在工作区中打开的默认解决方案的路径，或者设置为“禁用”以跳过它。(之前为 \"omnisharp.defaultLaunchSolution\")",
  "configuration.dotnet.enableXamlTools": "使用 C# 开发工具包时启用 XAML 工具",
  "configuration.dotnet.formatting.organizeImportsOnFormat": "指定在设置文档格式期间是否应对 “using” 指令进行分组和排序。(以前为 `omnisharp.organizeImportsOnFormat`)",
  "configuration.dotnet.highlighting.highlightRelatedJsonComponents": "突出显示光标下的相关 JSON 组件。",
  "configuration.dotnet.highlighting.highlightRelatedRegexComponents": "突出显示光标下的相关正则表达式组件。",
  "configuration.dotnet.inlayHints.enableInlayHintsForLiteralParameters": "显示文本提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": "显示 \"new\" 表达式的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForOtherParameters": "显示其他所有内容的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForParameters": "显示内联参数名称提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": "当参数名称只有后缀不同时禁止显示提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": "当参数与参数名称匹配时抑制提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": "当参数名称与方法的意图匹配时禁止显示提示",
  "configuration.dotnet.navigation.navigateToDecompiledSources": "启用对分解源的导航。",
  "configuration.dotnet.navigation.navigateToSourceLinkAndEmbeddedSources": "启用对源链接和嵌入源的导航。",
  "configuration.dotnet.preferCSharpExtension": "仅强制使用 C# 扩展加载项目。使用 C# Dev Kit 不支持的旧项目类型时，这可能很有用。(需要重新加载窗口)",
  "configuration.dotnet.projects.binaryLogPath": "设置在加载项目时写入 MSBuild 二进制日志的路径，以帮助诊断加载错误。",
  "configuration.dotnet.projects.enableAutomaticRestore": "如果扩展检测到缺少资产，则启用“自动 NuGet 还原”。",
  "configuration.dotnet.quickInfo.showRemarksInQuickInfo": "显示符号时显示备注信息。",
  "configuration.dotnet.server.componentPaths": "允许替代语言服务器内置组件的文件夹路径(例如，替代扩展目录中的 .roslynDevKit 路径以使用本地生成的组件)",
  "configuration.dotnet.server.componentPaths.roslynDevKit": "替代语言服务器的 .roslynDevKit 组件的文件夹路径",
  "configuration.dotnet.server.componentPaths.xamlTools": "替代语言服务器的 .xamlTools 组件的文件夹路径",
  "configuration.dotnet.server.crashDumpPath": "设置在语言服务器崩溃时在其中写入故障转储的文件夹路径。用户必须可以写入。",
  "configuration.dotnet.server.extensionPaths": "替代语言服务器 --extension 参数的路径",
  "configuration.dotnet.server.path": "指定服务器(LSP 或 O#)可执行文件的绝对路径。如果留空，会使用固定到 C# 扩展的版本。(之前为 \"omnisharp.path\")",
  "configuration.dotnet.server.startTimeout": "为客户端指定一个超时 (以毫秒为单位)，以成功启动并连接到语言服务器。",
  "configuration.dotnet.server.suppressLspErrorToasts": "当服务器遇到可恢复错误时，禁止显示错误 toast。",
  "configuration.dotnet.server.suppressMiscellaneousFilesToasts": "如果活动文档在打开的工作区之外，则禁止显示警告 toast。",
  "configuration.dotnet.server.useServerGC": "将语言服务器配置为使用 .NET 服务器垃圾回收。服务器垃圾回收在提供更好的性能时通常需要消耗更多内存。",
  "configuration.dotnet.server.waitForDebugger": "启动服务器时传递 --debug 标志，以允许附加调试器。(之前为 \"omnisharp.waitForDebugger\")",
  "configuration.dotnet.symbolSearch.searchReferenceAssemblies": "在引用程序集中搜索符号。它会影响需要符号搜索的功能，例如添加导入。",
  "configuration.dotnet.typeMembers.memberInsertionLocation": "实现接口或抽象类时属性、事件和方法的插入位置。",
  "configuration.dotnet.typeMembers.memberInsertionLocation.atTheEnd": "将它们放在末尾。",
  "configuration.dotnet.typeMembers.memberInsertionLocation.withOtherMembersOfTheSameKind": "将它们与相同类型的其他成员放置在一起。",
  "configuration.dotnet.typeMembers.propertyGenerationBehavior": "实现接口或抽象类时属性的生成行为。",
  "configuration.dotnet.typeMembers.propertyGenerationBehavior.preferAutoProperties": "首选自动属性。",
  "configuration.dotnet.typeMembers.propertyGenerationBehavior.preferThrowingProperties": "首选引发属性。",
  "configuration.dotnet.unitTestDebuggingOptions": "启动单元测试调试时要与调试程序一起使用的选项。(之前为 \"csharp.unitTestDebuggingOptions\")",
  "configuration.dotnet.unitTests.runSettingsPath": "运行单元测试时应使用的 .runsettings 文件的路径。(以前为“omnisharp.testRunSettings”)",
  "configuration.omnisharp.autoStart": "指定 OmniSharp 服务器是否自动启动。如果为 false，则可以使用“重启 OmniSharp”命令启动 OmniSharp",
  "configuration.omnisharp.csharp.format.enable": "启用/禁用默认 C# 格式化程序(需要重启)。",
  "configuration.omnisharp.csharp.maxProjectFileCountForDiagnosticAnalysis": "指定为整个工作区报告诊断的最大文件数。如果超出此限制，则仅显示当前打开的文件的诊断信息。指定 0 或更小的值以完全禁用限制。",
  "configuration.omnisharp.csharp.referencesCodeLens.filteredSymbols": "应为其禁用 CodeLens 的自定义符号名称数组。",
  "configuration.omnisharp.csharp.semanticHighlighting.enabled": "启用/禁用 C# 文件的语义突出显示(当前不支持 Razor 文件)。默认为 false。关闭打开的文件以使更改生效。",
  "configuration.omnisharp.csharp.showOmnisharpLogOnError": "当 OmniSharp 报告错误时，在输出窗格中显示 OmniSharp 日志。",
  "configuration.omnisharp.csharp.suppressBuildAssetsNotification": "禁止显示通知窗口以添加缺少的资产来构建或调试应用程序。",
  "configuration.omnisharp.csharp.suppressDotnetInstallWarning": "禁止显示“.NET Core SDK 不在路径上”的警告。",
  "configuration.omnisharp.csharp.suppressDotnetRestoreNotification": "当无法解析依赖项时，禁止显示通知窗口以执行“dotnet restore”。",
  "configuration.omnisharp.csharp.suppressHiddenDiagnostics": "禁止显示“隐藏”诊断(例如“不必要的使用指令”)出现在编辑器或“问题”窗格中。",
  "configuration.omnisharp.csharp.suppressProjectJsonWarning": "禁止显示“project.json 不再是 .NET Core 应用程序支持的项目格式”的警告",
  "configuration.omnisharp.disableMSBuildDiagnosticWarning": "指定如果 OmniSharp 在加载项目时遇到警告或错误，是否应显示通知。请注意，这些警告/错误始终会发送到 OmniSharp 日志",
  "configuration.omnisharp.dotNetCliPaths": "用于运行任何用户代码的 .NET CLI 的本地下载路径。",
  "configuration.omnisharp.dotnet.server.useOmnisharp": "启用后切换为使用 Omnisharp 服务器实现语言功能(需要重启)。安装 C# 开发工具包后，将不支持此选项。",
  "configuration.omnisharp.dotnetPath": "指定要使用的 dotnet 安装目录的路径，而不是默认的系统目录。这仅影响用于承载 OmniSharp 服务器本身的 dotnet 安装。示例: \"/home/username/mycustomdotnetdirectory\"。",
  "configuration.omnisharp.enableAsyncCompletion": "(实验性)启用对异步解决完成编辑的支持。这可以加快显示完成列表的时间，特别是替代和部分方法完成列表，但代价是插入完成项后会有轻微的延迟。大多数完成项都不会对该功能产生明显的影响，但在插入替代或部分方法完成之后，且在插入完成之前立即输入，可能会产生不可预测的结果。",
  "configuration.omnisharp.enableDecompilationSupport": "启用对反编译外部引用而不是查看元数据的支持。",
  "configuration.omnisharp.enableEditorConfigSupport": "启用从 .editorconfig 读取代码样式、命名约定和分析器设置的支持。",
  "configuration.omnisharp.enableLspDriver": "启用对基于实验性语言协议的引擎的支持(需要重新加载才能正确设置绑定)",
  "configuration.omnisharp.enableMsBuildLoadProjectsOnDemand": "如果为 True，MSBuild 项目系统将仅加载在编辑器中打开的文件的项目。此设置对于大型 C# 代码库很有用，并且支持仅针对与正在编辑的代码相关的项目加快代码导航功能初始化。启用此设置后，OmniSharp 可能会加载较少的项目，因此可能会显示不完整的符号参考列表。",
  "configuration.omnisharp.loggingLevel": "指定 OmniSharp 服务器的日志输出级别。",
  "configuration.omnisharp.maxFindSymbolsItems": "“转到工作区中的符号”操作可以显示的最大项目数。仅当此处指定正数时才应用此限制。",
  "configuration.omnisharp.maxProjectResults": "“选择项目”下拉菜单中显示的项目最大数量(最多 250 个)。",
  "configuration.omnisharp.minFindSymbolsFilterLength": "“转到工作区中的符号”操作显示任何结果之前需要输入的最少字符数。",
  "configuration.omnisharp.monoPath": "指定当“useModernNet”设置为 false 时要使用的 Mono 安装路径，而不是默认的系统路径。示例:“/Library/Frameworks/Mono.framework/Versions/Current”",
  "configuration.omnisharp.projectFilesExcludePattern": "OmniSharp 用于查找所有项目文件的排除模式。",
  "configuration.omnisharp.projectLoadTimeout": "Visual Studio Code 等待 OmniSharp 服务器启动的时间。时间以秒来表示。",
  "configuration.omnisharp.razor.completion.commitElementsWithSpace": "指定是否提交带有空格的标记帮助程序和组件元素。",
  "configuration.omnisharp.razor.devmode": "强制扩展以启用本地 Razor.VSCode 开发的模式运行。",
  "configuration.omnisharp.razor.format.codeBlockBraceOnNextLine": "强制将 @code 或 @functions 指令后的开括号放在下一行。",
  "configuration.omnisharp.razor.format.enable": "启用/禁用默认 Razor 格式化程序。",
  "configuration.omnisharp.razor.plugin.path": "替代 Razor 插件 dll 的路径。",
  "configuration.omnisharp.sdkIncludePrereleases": "指定在确定使用哪个版本进行项目加载时是否包含 .NET SDK 的预览版本。当“useModernNet”设置为 true 时适用。",
  "configuration.omnisharp.sdkPath": "指定用于项目加载的 .NET SDK 安装路径，而不是安装的最高版本。当“useModernNet”设置为 true 时适用。示例: /home/username/dotnet/sdks/6.0.300。",
  "configuration.omnisharp.sdkVersion": "指定用于项目加载的 .NET SDK 版本，而不是安装的最高版本。当“useModernNet”设置为 true 时适用。示例: 6.0.300。",
  "configuration.omnisharp.useEditorFormattingSettings": "指定 OmniSharp 是否应使用 VS Code 编辑器设置进行 C# 代码格式化(使用制表符、缩进大小)。",
  "configuration.omnisharp.useModernNet.description": "使用 .NET 6 版本的 OmniSharp。此版本不支持非 SDK 风格的 .NET Framework 项目，包括 Unity。SDK 样式的框架、.NET Core 和 .NET 5+ 项目应该会获得显著的性能提升。",
  "configuration.omnisharp.useModernNet.title": "使用 .NET 6 版本的 OmniSharp",
  "configuration.razor.languageServer.debug": "指定在启动语言服务器时是否等待调试附加。",
  "configuration.razor.languageServer.directory": "重写 Razor 语言服务器目录的路径。",
  "configuration.razor.languageServer.forceRuntimeCodeGeneration": "(试验性)为 Razor 文件启用组合设计时/运行时代码生成",
  "configuration.razor.languageServer.suppressLspErrorToasts": "当服务器遇到可恢复错误时，禁止显示错误 toast。",
  "configuration.razor.languageServer.useNewFormattingEngine": "使用新的 Razor 格式化引擎。",
  "configuration.razor.server.trace": "指定要用于 Razor 服务器的日志记录级别。",
  "debuggers.coreclr.configurationSnippets.description.attach": "将 .NET 调试器 (coreclr) 附加到正在运行的进程。也可以使用“附加到 .NET 5+ 或 .NET Core 进程”命令完成此操作。",
  "debuggers.coreclr.configurationSnippets.description.blazor-hosted": "此代码片段用于在 Blazor WebAssembly 调试器 (blazorwasm) 下启动新进程，指定要启动的可执行文件的路径。在大多数情况下，“.NET: 启动 C# 项目”代码片段是更好的选择，但此代码片段可用于完全控制所有启动选项。此代码片段适用于托管的 Blazor 项目，该项目具有后端 ASP.NET 核心应用以提供其文件。",
  "debuggers.coreclr.configurationSnippets.description.blazor-standalone": "此代码片段用于在 Blazor WebAssembly 调试器 (blazorwasm) 下启动新进程。在大多数情况下，“.NET: 启动 C# 项目”代码片段是更好的选择，但此代码片段可用于完全控制所有启动选项。此代码片段适用于独立的 Blazor 项目，该项目不具有后端 ASP.NET 核心应用以提供其文件。",
  "debuggers.coreclr.configurationSnippets.description.console-local": "此代码片段用于在 .NET 调试器 (coreclr) 下启动新进程，指定要启动的可执行文件的路径。在大多数情况下，“.NET: 启动 C# 项目”代码片段是更好的选择。当项目在此 VS Code 实例外部生成，或者想要将 .NET Code 托管在自定义可执行文件(例如，特定版本的 “dotnet.exe”/'dotnet' )中或者 .NET Code 由本机应用程序托管时，此代码片段非常有用。此代码片段适用于控制台应用程序。",
  "debuggers.coreclr.configurationSnippets.description.remote": "此代码片段演示了如何在 **不使用** VS Code 远程处理的情况下远程调试 .NET Code。如果要在本地生成项目但在另一台计算机上运行项目，应使用它。",
  "debuggers.coreclr.configurationSnippets.description.web-local": "此代码片段用于在 .NET 调试器 (coreclr) 下启动新进程，指定要启动的可执行文件的路径。在大多数情况下，“.NET: 启动 C# 项目”代码片段是更好的选择。当项目在此 VS Code 实例外部生成，或者想要将 .NET Code 托管在自定义可执行文件(例如，特定版本的 “dotnet.exe”/'dotnet' )中或者 .NET Code 由本机应用程序托管时，此代码片段非常有用。此代码片段适用于 Web (ASP.NET Core) 应用程序。",
  "debuggers.coreclr.configurationSnippets.label.attach-local": ".NET: 附加到 .NET 进程",
  "debuggers.coreclr.configurationSnippets.label.attach-remote": ".NET: 远程调试 - 附加到 .NET 进程",
  "debuggers.coreclr.configurationSnippets.label.blazor-hosted": ".NET: Web 程序集 - 启动托管的 Blazor 项目",
  "debuggers.coreclr.configurationSnippets.label.blazor-standalone": ".NET: Web 程序集 - 启动独立的 Blazor 项目",
  "debuggers.coreclr.configurationSnippets.label.console-local": ".NET: 启动可执行文件(控制台)",
  "debuggers.coreclr.configurationSnippets.label.console-remote": ".NET: 远程调试 - 启动可执行文件(控制台)",
  "debuggers.coreclr.configurationSnippets.label.web-local": ".NET: 启动可执行文件 (Web)",
  "debuggers.dotnet.configurationSnippets.description": "此代码片段将 VS Code 配置为调试 C# 项目。可以通过“<project-directory>/Properties/launchSettings.json”文件配置调试选项(示例: 可执行文件的参数)。",
  "debuggers.dotnet.configurationSnippets.label": ".NET: 启动 C# 项目",
  "debuggers.dotnet.launch.launchConfigurationId.description": "要使用的启动配置 ID。空字符串将使用当前的活动配置。",
  "debuggers.dotnet.launch.projectPath.description": ".csproj 文件的路径。",
  "generateOptionsSchema.args.0.description": "传递给程序的命令行参数。",
  "generateOptionsSchema.args.1.description": "传递给程序的命令行参数的字符串化版本。",
  "generateOptionsSchema.checkForDevCert.description": "如果要在 Windows 或 macOS 上启动 Web 项目并启用此功能，当计算机具有用于开发在 https 终结点上运行的 Web 服务器的自签名 HTTPS 证书时，调试器将检查。如果未指定，在设置 \"serverReadyAction\" 时默认为 true。此选项在 Linux、VS Code 远程和 VS Code Web UI 方案中不起作用。如果找不到 HTTPS 证书或该证书不受信任，将提示用户安装/信任它。",
  "generateOptionsSchema.console.externalTerminal.enumDescription": "目标进程将在其自己的外部终端内运行。使用此模式时，需要在 Visual Studio Code 窗口和外部终端窗口之间切换焦点。",
  "generateOptionsSchema.console.integratedTerminal.enumDescription": "目标进程将在 VS Code 的集成终端内运行。",
  "generateOptionsSchema.console.internalConsole.enumDescription": "目标进程的控制台输入 (stdin) 和输出 (stdout/stderr) 通过 VS Code 调试控制台进行路由。",
  "generateOptionsSchema.console.markdownDescription": "指示目标程序应启动到哪个控制台。有关详细信息，请参阅 https://aka.ms/VSCode-CS-LaunchJson-Console。",
  "generateOptionsSchema.console.settingsDescription": "**注意:** _此选项仅用于使用 `dotnet` 调试配置类型启动的控制台项目_。\r\n\r\n指示目标程序应启动到哪个控制台。有关详细信息，请参阅 https://aka.ms/VSCode-CS-LaunchJson-Console。",
  "generateOptionsSchema.cwd.description": "正在调试的程序的工作目录的路径。默认值是当前工作区。",
  "generateOptionsSchema.debugServer.description": "仅用于调试扩展开发: 如果已指定端口，VS 代码会尝试连接到在服务器模式中运行的调试适配器",
  "generateOptionsSchema.enableStepFiltering.markdownDescription": "用于启用逐过程执行属性和运算符的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.env.description": "传递给程序的环境变量。",
  "generateOptionsSchema.envFile.markdownDescription": "文件传递给程序的环境变量。例如 \"${workspaceFolder}/.env\"",
  "generateOptionsSchema.expressionEvaluationOptions.allowFastEvaluate.description": "如果为 true (默认状态)，调试器将尝试模拟简单属性和方法的执行以加快评估速度。",
  "generateOptionsSchema.expressionEvaluationOptions.allowImplicitFuncEval.description": "如果为 true (默认状态)，调试程序将自动调用属性 `get` 方法和其他隐式函数调用。",
  "generateOptionsSchema.expressionEvaluationOptions.allowToString.markdownDescription": "如果为 true (默认状态)，调试程序将自动调用 `ToString` 来设置对象的格式。如果 `allowImplicitFuncEval` 为 `false`，则此选项无效。",
  "generateOptionsSchema.expressionEvaluationOptions.description": "用于控制调试程序如何在数据提示、调试视图的“监视”和“变量”部分或调试控制台中计算表达式的选项。",
  "generateOptionsSchema.expressionEvaluationOptions.showRawValues.description": "如果为 true，调试程序将在变量窗口中显示对象的原始结构。",
  "generateOptionsSchema.externalConsole.markdownDescription": "特性 \"externalConsole\" 已弃用，请改用 \"console\"。此选项默认为 \"false\"。",
  "generateOptionsSchema.justMyCode.markdownDescription": "启用(默认)后，调试器仅显示并单步执行用户代码(“我的代码”)，忽略系统代码和其他经过优化或没有调试符号的代码。[详细信息](https://aka.ms/VSCode-CS-LaunchJson-JustMyCode)",
  "generateOptionsSchema.launchBrowser.args.description": "要传递给命令以打开浏览器的参数。只有当平台特定的元素 (\"osx\"、\"linux\" 或 \"windows\") 没有为 \"args\" 指定值时，才使用此选项。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.description": "描述在启动过程中启动 Web 浏览器的选项",
  "generateOptionsSchema.launchBrowser.enabled.description": "是否已启用 Web 浏览器启动。此选项默认为 \"true\"。",
  "generateOptionsSchema.launchBrowser.linux.args.description": "要传递给命令以打开浏览器的参数。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.linux.command.description": "将启动 Web 浏览器的可执行文件。",
  "generateOptionsSchema.launchBrowser.linux.description": "特定于 Linux 的 Web 启动配置选项。默认情况下，这将使用 \"xdg-open\" 启动浏览器。",
  "generateOptionsSchema.launchBrowser.osx.args.description": "要传递给命令以打开浏览器的参数。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.osx.command.description": "将启动 Web 浏览器的可执行文件。",
  "generateOptionsSchema.launchBrowser.osx.description": "特定于 OSX 的 Web 启动配置选项。默认情况下，这将使用 \"open\" 启动浏览器。",
  "generateOptionsSchema.launchBrowser.windows.args.description": "要传递给命令以打开浏览器的参数。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.windows.command.description": "将启动 Web 浏览器的可执行文件。",
  "generateOptionsSchema.launchBrowser.windows.description": "特定于 Windows 的 Web 启动配置选项。默认情况下，这将使用 \"cmd /c start\" 启动浏览器。",
  "generateOptionsSchema.launchSettingsFilePath.markdownDescription": "launchSettings.json 文件的路径。如果未设置此项，调试器将在 \"{cwd}/Properties/launchSettings.json\" 中搜索。",
  "generateOptionsSchema.launchSettingsProfile.description": "如果指定，则指示要使用的 launchSettings.json 中配置文件的名称。如果找不到 launchSettings.json，则忽略此项。将从指定的路径中读取 launchSettings.json，该路径应为 \"launchSettingsFilePath\" 属性或 {cwd}/Properties/launchSettings.json (如果未设置)。如果此项设置为 null 或空字符串，则忽略 launchSettings.json。如果未指定此值，将使用第一个“项目”配置文件。",
  "generateOptionsSchema.logging.browserStdOut.markdownDescription": "用于确定是否应将启动 Web 浏览器中的 stdout 文本记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.consoleUsageMessage.description": "控制在目标进程调用 \"Console.Read*\" API 且 stdin 重定向到控制台时是否记录消息。",
  "generateOptionsSchema.logging.description": "用于确定应将哪些类型的消息记录到输出窗口的标志。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.all.enumDescription": "打印所有调试程序 API 调用。需要非常详细。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.error.enumDescription": "打印调试程序 API 调用中的失败。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.markdownDescription": "控制是否应将对 Microsoft.VisualStudio.Debugger.Engine/vsdebugeng.h 的 API 调用打印到输出窗口。此选项默认为 `none`。",
  "generateOptionsSchema.logging.diagnosticsLog.debugEngineAPITracing.none.enumDescription": "禁用跟踪 API 调用",
  "generateOptionsSchema.logging.diagnosticsLog.debugRuntimeEventTracing.markdownDescription": "用于确定是否应启用详细跟踪基础运行时引发的事件的标志。此选项默认为 `false`。",
  "generateOptionsSchema.logging.diagnosticsLog.description": "用于控制从调试程序的诊断日志将哪些消息打印到输出窗口的设置。此日志旨在帮助解决调试程序的问题。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.error.enumDescription": "打印错误级别诊断消息。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.important.enumDescription": "打印重要的诊断消息。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.markdownDescription": "控制从调试程序的调度程序将哪些消息打印到输出窗口。如果未指定，将默认为 `none`，除非启用了一个详细日志设置 (`debugEngineAPITracing`、`debugRuntimeEventTracing`、`expressionEvaluationTracing` 或 `startDebuggingTracing`)，在这种情况下，默认值将更改为 `normal`。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.none.enumDescription": "不打印其他诊断消息。",
  "generateOptionsSchema.logging.diagnosticsLog.dispatcherMessages.normal.enumDescription": "打印所有非详细诊断消息。",
  "generateOptionsSchema.logging.diagnosticsLog.expressionEvaluationTracing.markdownDescription": "用于确定是否应启用详细跟踪表达式计算的标志。此选项默认为 `false`。",
  "generateOptionsSchema.logging.diagnosticsLog.protocolMessages.markdownDescription": "用于确定是否应将 C# 调试程序和 UI 之间交换的 DAP 协议消息记录到输出窗口的标志。此选项默认为 `false`。",
  "generateOptionsSchema.logging.diagnosticsLog.startDebuggingTracing.markdownDescription": "用于确定是否应启用详细跟踪启动调试的标志。此选项默认为 `false`。",
  "generateOptionsSchema.logging.elapsedTiming.markdownDescription": "如果为 true，协议消息日志记录将包括 \"adapterElapsedTime\" 和 \"engineElapsedTime\" 属性，以指示请求花费的时间(以微秒为单位)。此选项默认为 \"false\"。",
  "generateOptionsSchema.logging.engineLogging.deprecationMessage": "\"logging.engineLogging\" 设置已弃用，取而代之的是 \"logging.diagnosticsLog.protocolMessages\"。",
  "generateOptionsSchema.logging.exceptions.markdownDescription": "用于确定是否应将异常消息记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.moduleLoad.markdownDescription": "用于确定是否应将模块加载事件记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.processExit.markdownDescription": "控制在目标进程退出或调试停止时是否记录消息。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.programOutput.markdownDescription": "用于确定在不使用外部控制台时是否应将程序输出记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.threadExit.markdownDescription": "控制在目标进程中的线程退出时是否记录消息。此选项默认为 \"false\"。",
  "generateOptionsSchema.pipeTransport.debuggerPath.description": "目标计算机上调试程序的完整路径。",
  "generateOptionsSchema.pipeTransport.description": "如果存在，这会指示调试程序使用其他可执行文件作为管道来连接到远程计算机，此管道将在 VS Code 和 .NET Core 调试程序后端可执行文件 (vsdbg) 之间中继标准输入/输入。",
  "generateOptionsSchema.pipeTransport.linux.description": "特定于 Linux 的管道启动配置选项",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.linux.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.linux.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.linux.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.linux.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.pipeTransport.osx.description": "特定于 OSX 的管道启动配置选项",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.osx.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.osx.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.osx.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.osx.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.pipeTransport.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.pipeTransport.windows.description": "特定于 Windows 的管道启动配置选项",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.windows.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.windows.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.windows.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.windows.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.processId.0.markdownDescription": "要附加到的进程 ID。使用 \"\" 获取要附加到的正在运行进程的列表。如果使用了 \"processId\"，不应使用 \"processName\"。",
  "generateOptionsSchema.processId.1.markdownDescription": "要附加到的进程 ID。使用 \"\" 获取要附加到的正在运行进程的列表。如果使用了 \"processId\"，不应使用 \"processName\"。",
  "generateOptionsSchema.processName.markdownDescription": "要附加到的进程名称。如果使用此项，不应使用 \"processId\"。",
  "generateOptionsSchema.program.markdownDescription": "要启动的应用程序 dll 或 .NET Core 主机可执行文件的路径。\r\n此属性通常采用以下格式: \"${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)\"\r\n\r\n示例: \"${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll\"\r\n\r\n位置:\r\n\"(target-framework)\" 是要为其生成调试项目的框架。这通常在项目文件中作为 \"TargetFramework\" 属性找到。\r\n\r\n\"(project-name.dll)\" 是调试项目的生成输出 dll 的名称。这通常与项目文件名相同，但具有 \".dll\" 扩展名。",
  "generateOptionsSchema.requireExactSource.markdownDescription": "要求当前源代码与 pdb 匹配的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.sourceFileMap.markdownDescription": "将生成时路径映射到本地源位置。生成时路径的所有实例都将替换为本地源路径。\r\n\r\n例子:\r\n\r\n\"{\"<build-path>\":\"<local-source-path>\"}\"",
  "generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription": "是否为此 URL 启用了 Source Link? 如果未指定，此选项默认为 \"true\"。",
  "generateOptionsSchema.sourceLinkOptions.markdownDescription": "用于控制 Source Link 如何连接到 Web 服务器的选项。[详细信息](https://aka.ms/VSCode-DotNet-SourceLink)",
  "generateOptionsSchema.stopAtEntry.markdownDescription": "如果为 true，调试器应在目标的入口点停止。此选项默认为 \"false\"。",
  "generateOptionsSchema.suppressJITOptimizations.markdownDescription": "如果为 true，则在目标进程中加载优化模块(发布配置中编译的 .dll)时，调试器将要求实时编译器生成禁用优化的代码。[详细信息](https://aka.ms/VSCode-CS-LaunchJson-SuppressJITOptimizations)",
  "generateOptionsSchema.symbolOptions.cachePath.description": "应缓存从符号服务器下载的符号的目录。如果未指定，则在 Windows 上，调试器将默认为 %TEMP%\\SymbolCache；在 Linux 和 macOS 上，调试器将默认为 ~/.dotnet/symbolcache。",
  "generateOptionsSchema.symbolOptions.description": "用于控制如何找到和加载符号(.pdb 文件)的选项。",
  "generateOptionsSchema.symbolOptions.moduleFilter.description": "提供选项来控制调试程序将尝试为哪些模块(.dll 文件)加载符号(.pdb 文件)。",
  "generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description": "调试程序不得为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\r\n\r\n会忽略此属性，除非“模式”设置为 \"loadAllButExcluded\"。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description": "如果为 true，则对于未在 \"includedModules\" 数组中的任何模块，调试程序将在模块本身和启动可执行文件旁边进行检查，但它将不检查符号搜索列表上的路径。此选项默认为 \"true\"\r\n\r\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsOnDemand.description": "如果为 true，则对于 \"includedModules\" 数组中没有的任何模块，调试程序将在检测到需要符号时(例如尝试单步执行模块时)尝试下载这些符号。此选项默认为 \"true\"。\r\n\r\n除非将 \"mode\" 设置为 \"loadOnlyIncluded\"，否则将忽略此属性。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description": "调试程序应为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\r\n\r\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.description": "控制模块筛选器在两种基本操作模式的下一种模式下操作。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription": "为所有模块加载符号，除非模块在 \"excludedModules\" 数组中。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription": "请勿尝试为任何模块加载符号，除非该模块在 \"includedModules\" 数组中，或者它通过 \"includeSymbolsNextToModules\" 设置包含在内。",
  "generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description": "如果为 \"true\"，则 Microsoft 符号服务器(https​://msdl.microsoft.com​/download/symbols)会添加到符号搜索路径。如果未指定，此选项会默认为 \"false\"。",
  "generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description": "如果为 \"true\"，NuGet.org 符号服务器 (https​://symbols.nuget.org​/download/symbols) 会添加到符号搜索路径。如果未指定，此选项默认为 \"false\"。",
  "generateOptionsSchema.symbolOptions.searchPaths.description": "在其中搜索 .pdb 文件的符号服务器 URL (example: http​://MyExampleSymbolServer)或目录(example: /build/symbols)的数组。除了默认位置，还将搜索这些目录 - 在模块以及 pdb 最初放置到的路径的旁边。",
  "generateOptionsSchema.targetArchitecture.markdownDescription": "[仅在本地 macOS 调试中受支持]\r\n\r\n调试对象的体系结构。除非设置了此参数，否则将自动检测到此参数。允许的值为 \"x86_64\" 或 \"arm64\"。",
  "generateOptionsSchema.targetOutputLogPath.description": "设置后，目标应用程序写入 stdout 和 stderr (例如 Console.WriteLine) 的文本将保存到指定的文件。如果控制台设置为 internalConsole 以外的其他内容，则忽略此选项。例如 \"${workspaceFolder}/out.txt\"",
  "generateOptionsSchema.type.markdownDescription": "键入要调试的代码类型。可以是用于 .NET Core 调试的“coreclr”，也可以是用于桌面 .NET Framework 的“clr”。由于桌面框架仅适用于 Windows，因此“clr”仅适用于 Windows。",
  "viewsWelcome.debug.contents": "[为版本和调试生成 C# 资产](command:dotnet.generateAssets)\r\n\r\n若要了解有关 launch.json 的详细信息，请参阅 [为 C# 调试配置 launch.json](https://aka.ms/VSCode-CS-LaunchJson)。"
}